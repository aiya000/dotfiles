"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" nazo

onoremap <silent> q
\      :for i in range(v:count1)
\ <Bar>   call search('.\&\(\k\<Bar>\_s\)\@!', 'W')
\ <Bar> endfor<CR>

set indentexpr&  " &...?


"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" Note


" syntax sync fromstart {{{
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : fromstartやばいですねwww  01/17 23:19
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : しかし確実に正しく(もちろんsyntax定義の範囲内で)ハイライトされるので、私はたまに使っちゃう  01/17 23:19
                これそもそも良くないのが、これバッファ毎で、大体 syntax 定義内に書かれてるのだよね。ユーザーコントロールする手段欲しい感ある。Syntax イベントで上書き設定しろってことなのかもしれないけど  01/17 23:20
------------------------------------------------------------------------------------------------------------------------------------------------
haya14busa    : markdownで頻繁にシンタクス壊れるのでいじりたい  01/17 23:21
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : autocmd Syntax markdown syntax sync fromstart
                これでもしかしたら改善されるかもわからん  01/17 23:25
------------------------------------------------------------------------------------------------------------------------------------------------
"}}}


"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"



NeoBundle 'thinca/vim-localrc'
NeoBundle 'vim-scripts/closetag.vim'
NeoBundle 'vim-scripts/errormarker.vim'
NeoBundle 'mattn/vimplenote-vim'
NeoBundle 'taglist.vim'
NeoBundle 'airblade/vim-rooter'
NeoBundle 'othree/eregex.vim'
NeoBundle 'motemen/xslate-vim'
NeoBundle 'mattn/sonictemplate-vim'
NeoBundle 'chase/vim-ansible-yaml'
NeoBundle 'gre/play2vim'
NeoBundle 'sorah/unite-ghq'

L421 これは poslist.vim 案件  12/14 00:00


NeoBundle 'jceb/vim-hier'
NeoBundle 'dannyob/quickfixstatus'
NeoBundle "osyo-manga/shabadou.vim"
NeoBundle "osyo-manga/vim-watchdogs"
NeoBundle "motemen/vim-guess-abbrev"
NeoBundle 'kana/vim-fakeclip'
NeoBundle 'gcmt/wildfire.vim'
NeoBundle "syui/airsave.vim"
NeoBundle 'mileszs/ack.vim'
NeoBundle 'motemen/vim-help-random'
NeoBundle 'sgur/unite-qf'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'sgur/unite-git_grep'


NeoBundle 'thinca/vim-showtime'
                L288 visualstar.vim 案件  12/27 23:24
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>



" 行末の半角スペースを可視化(うまく動かない？)
NeoBundle 'bronson/vim-trailing-whitespace'
" less用のsyntaxハイライト
NeoBundle 'KohPoll/vim-less'


------------------------------------------------------------------------------------------------------------------------------------------------
deris0126     : L105 80文字への執念を感じると思ったら…  01/17 23:05
------------------------------------------------------------------------------------------------------------------------------------------------
"set cpo+=a " :read  command with a file name arg will modify the window's alternate file name
( {{{
" Settings for Vi-compatible behavior (Vim default: aABceFs)
" Note: this list is not exhaustive. See :h 'cpo'
 set cpoptions=
"set cpo+=a " :read  command with a file name arg will modify the window's alternate file name
"set cpo+=A " :write command with a file name arg will modify the window's alternate file name
 set cpo+=B " Give backslash no special meaning in mappings, abbreviations and the 'to' part of the menu commands
 set cpo+=c " Searching continues at the end of any match at the cursor position, but not further than the start of the next line
 set cpo+=e " When executing a register with ':@r', always add a <CR> to the last line even when the register is not linewise
 set cpo+=F " :write with a file name argument will set the file name for the current buffer if it doesn't have one already
"set cpo+=i " Interrupting the reading of a file will leave it modified.
 set cpo+=K " Don't wait for a key code to complete
"set cpo+=m " 'Showmatch' will always wait half a second, even if a character is typed within that time period
 set cpo+=q " Joining multiple lines leaves the cursor where it would be when joining two lines
"set cpo+=s " Set buffer options when first entering the buffer instead of when it's created
"set cpo+=t " Search pattern for the tag command is remembered for 'n' command
 set cpo+={ " The |{| and |}| commands also stop at a '{' character at the start of a line.
) }}}
------------------------------------------------------------------------------------------------------------------------------------------------
deris0126     : 人生諦めが肝心というのがわかる  01/17 23:05
thinca        : 何を諦めたんです?  01/17 23:06
deris0126     : 1行80文字で揃えるのを… > 何を諦めたんです?  01/17 23:07
------------------------------------------------------------------------------------------------------------------------------------------------


" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'


------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : comments オプションはだいたいバッファ毎なので、ftplugin がしっかりしていれば定義されていたりしますね  01/17 23:23
                あとはシンクロナイズパターンを設定することによりよさが生まれる可能性がある  01/17 23:27
                :help :syn-sync-fourth  01/17 23:27
thinca        : 正直何言ってるのかわかkらんレベルの難しさがあり、常人に設定するのは困難感を醸し出している  01/17 23:28
------------------------------------------------------------------------------------------------------------------------------------------------
set comments-=s1:/*,mb:*,ex:*/                        " /* Make C-style comments
set comments+=s:/*,mb:\ *,ex:\ */                     "  * wrap like this
set comments+=fb:*                                    "  */

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : 今自分の設定確認したら <C-g><C-u> で直前に入力した単語を全て大文字にするキーマッピングが施されていた  01/17 23:45
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
haya14busa    : L236 なるほどそんな手があるのか...すごい  01/18 00:08
------------------------------------------------------------------------------------------------------------------------------------------------

https://github.com/kana/vim-niceblock
set nrformats=hex,alpha                     " Accepted bases for <C-A> and <C-X>

------------------------------------------------------------------------------------------------
http://d.hatena.ne.jp/osyo-manga/20120118/1326838173
------------------------------------------------------------------------------------------------


" --- --- --- "
2015年01月24日 23時01分41秒
" --- --- --- "

set backupext=.bak
set backupskip+=*/shm/*
set nowritebackup

" Insert four spaces when Tab is pressed
set softtabstop=4
" Indent intelligently to 'shiftwidth' at the starts of lines with Tab, but
" use 'tabstop' everywhere else
set smarttab
" When indenting lines with < or >, round the indent to a multiple of
" 'shiftwidth', so even if the line is indented by one space it will indent
" up to 4 and down to 0, for example
set shiftround


st formatoptions+=j

" Preserve the flags for a pattern when repeating a substitution with &; I don't
" really understand why this isn't a default, but there it is
nnoremap & :&&<CR>
vnoremap & :&&<CR>

" Don't use modelines at all, they're apparently potential security problems
" and I've never used them anyway
set nomodeline

" Don't assume a number with a leading zero is octal; it's far more likely a
" zero-padded decimal, so increment and decrement with ^A and ^X on that basis
set nrformats-=octal

" Don't bother about checking whether Escape is being used as a means to enter
" a Meta-key combination, just register Escape immediately
set noesckeys

" set eventignore

" Don't resize windows we're not splitting (Tmux-like; think Mondrian)
set noequalalways

" Only show the tab bar if there's more than one tab
if exists('&showtabline')
  set showtabline=1
endif

" Use the tilde as an operator with motions, rather than just swapping the
" case of the character under the cursor
set tildeop

" Get rid of visually noisy folding characters
if has('folding')
  let &fillchars = 'diff: ,fold: ,vert: '
endif

" Don't write the output of :make to the terminal
set shellpipe=>

" Allow jumping between windows and tabs to find an open instance of a given
" buffer with :sbuffer.
if v:version >= 701
  set switchbuf=useopen,usetab
else
  set switchbuf=useopen
endif


"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" mtth


set diffopt=filler,vertical
set eadirection=hor                                                         " only resize automatically horizontally (cf. ``equalalways`` option)
set nostartofline                                                           " keeps cursor on current column for movements like H, M, ...
set shellredir=>%s\ 2>&1                                                    " otherwise syntastic isn't able to pick up checker versions
set comments-=:%                                                            " these shouldn't be considered comments by default
set formatlistpat=^\\s*\\(\\d\\(\\d\\ze\\d*[\\]:.)}]\\\|[\\]:.)}]\\ze\\)\\\|:[^:]\\ze[^:]*:\\\|[*+-]\\)\\s
if v:version >=# 704
  set formatoptions=rqnlj                                                   " only manual formatting by default
else
  set formatoptions=rqnl                                                    " j option not supported before 7.4
endif
let &dictionary = '/usr/share/dict/words,'                                  " files where to load word for dictionary
let &dictionary .= g:runtimepath . '/spell/custom.utf-8.add'                " completion for use with <c-x><c-k>


haya14busa   : visual-star案件だ  03/08 00:10
" enable search for selected text, forwards (*) or backwards (#)
xnoremap <silent> * :<c-u>
  \let old_reg=getreg('"')<bar>let old_regtype=getregtype('"')<cr>
  \gvy/<c-r>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<cr><cr>
  \:call setreg('"', old_reg, old_regtype)<cr>
xnoremap <silent> # :<c-u>
  \let old_reg=getreg('"')<bar>let old_regtype=getregtype('"')<cr>
  \gvy?<c-r>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<cr><cr>
  \:call setreg('"', old_reg, old_regtype)<cr>

" open .vimrc (following potential symbolic link)
nnoremap <leader>ve :tabnew <c-r>=resolve(expand($MYVIMRC))<cr><cr>:help<cr><c-w>L:vertical resize 80<cr>:set winfixwidth<cr><c-w>h
"source .vimrc (and rerun any filetype settings)
nnoremap <leader>vs :source $MYVIMRC<cr>:filetype detect<cr>


" smart indentation
inoremap <expr> <s-tab> <SID>smart_tab()
function! s:smart_tab() "{{{
  " fills in line with character before cursor until one of the following
  " * matches indent of characters preceded by two or more whitespace characters
  "   in the first non-empty line above
  " * texwidth
  " * next tabstop
  " if the current line is empty, the fill character will be a single space
  let [buf_name, line_number, col_number, off_number] = getpos('.')
  let cur_line = getline(line_number)
  if strlen(cur_line)
    let fill_char = cur_line[col('.') - 2]
  else
    let fill_char = ' '
  endif
  let line_content = ''
  while !strlen(line_content) && line_number >=# 1
    let line_number -= 1
    let line_content = getline(line_number)
  endwhile
  let line_content = line_content[col('.') - 1:]
  let offset = match(line_content, '\s\s\zs\S\|$')
  if offset ># 0
    return repeat(fill_char, offset)
  elseif &textwidth && col_number <=# &textwidth
    return repeat(fill_char, &textwidth - col_number + 1)
  else
    return repeat(fill_char, &tabstop - (col_number - 1) % &tabstop)
  endif
endfunction "}}}
" expand inline parenthesis arguments to multiline
nnoremap gJ 0f(a<cr><esc>f)i<cr><esc>kI<tab><esc>0dw:s/\v,\s+/,\r/g<cr>``<c-v>``I<c-r>"<esc>``A



"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" hotchpotch

Bundle 'ciaranm/detectindent'
Bundle 'L9'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86" || &term =~ "xterm-256color"
 set t_Co=16
 set t_Sf=[3%dm
 set t_Sb=[4%dm
endif

if &term =~ "screen"
  " screen Buffer 切り替えで screen にファイル名を表示
  autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | silent! exe '!echo -n "kv:%\\"' | endif
  autocmd VimLeave * silent! exe '!echo -n "kvim\\"'
endif

" command line で command window 開く
set cedit=<C-O>

" str2numchar.vim
" 範囲選択してる文字列を変換
vnoremap <silent> sn :Stn2NumChar<CR> " あ => &#12354;
vnoremap <silent> sh :Str2HexLiteral<CR> " あ => \\xE3\\x81\\x82

" ウィンドウの高さを選択範囲と同じになるよう調整
vnoremap <silent> _ <Esc>`<zt:execute (line("'>") - line("'<") + 1) 'wincmd' '_'<Return>

++enc

" yanktmp.vim
noremap <silent> sy :call YanktmpYank()<CR>
noremap <silent> sp :call YanktmpPaste_p()<CR>

set nofsync
set grepprg=internal

" 検索レジストリに入ってる文字で現在のファイルを検索し、quickfix で開く
nnoremap <unique> g/ :exec ':vimgrep /' . getreg('/') . '/j %\|cwin'<CR>
" G/ ではすべてのバッファ
" nnoremap <unique> G/ :silent exec ':cexpr "" \| :bufdo vimgrepadd /' . getreg('/') . '/j %'<CR>\|:silent cwin<CR>

" バッファから検索
function! Bgrep(word)
  cexpr '' " quickfix を空に
  silent exec ':bufdo | try | vimgrepadd ' . a:word . ' % | catch | endtry'
  silent cwin
endfunction
command! -nargs=1 Bgrep :call Bgrep(<f-args>)

" 引数の文字列を、ディレクトリ配下から再帰的に検索
function! Findgrep(arg)
  let findgrep_cmd = 'find . -type f ! -regex ".*\.svn.*" ! -regex ".*\.git.*" ! -regex ".*\.sw.*" ! -regex ".*tags" -print0 |xargs -0 grep -n '
  cgetexpr system(findgrep_cmd . a:arg)
  silent cwin
endfunction
command! -nargs=1 Findgrep :call Findgrep(<f-args>)

" changelog
let g:changelog_username = "Yuichi Tateno"
let g:changelog_dateformat = '== %Y-%m-%d'
let g:changelog_new_entry_format= '  * %c'

" ack.vim 
let g:AckAllFiles=0

" QuickFix のサイズ調整,自動で抜ける 
function! s:autoCloseQuickFix()
  let qllen = min([10, len(getqflist())])
  cclose
  if qllen
    execute 'cw' . qllen
    normal <C-W><C-W>
  endif
  redraw
endfunction
autocmd QuickFixCmdPost * :call s:autoCloseQuickFix()
" quickfix を閉じる
nnoremap <unique> ec :cclose<CR>

" jptemplate.vim
let g:jpTemplateKey = '<Tab>'

" {{{ QFixHowm.vim
let QFixHowm_Key = 'g'
if has('win32')
  let howm_dir             = 'c:/dropbox/My Dropbox/howm'
  let QFixHowm_MruFile     = 'c:/dropbox/My Dropbox/howm/.howm-mru'
else
  let howm_dir             = '~/Dropbox/howm'
  let QFixHowm_MruFile     = '~/Dropbox/howm/.howm-mru'
end
let howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.howm'
let howm_fileencoding    = 'utf-8'
let howm_fileformat      = 'unix'
let QFixHowm_MruFileMax = 50
let QFixHowm_Title = '='
" let disable_MyQFix = 1

"タイトルに何も書かれていない場合、エントリ内から適当な文を探して設定する。
""文字数は半角換算で最大 QFixHowm_Replace_Title_len 文字まで使用する。0なら何もしない。
"let QFixHowm_Replace_Title_Len = 64

"対象になるのは QFixHowm_Replace_Title_Pattern
"の正規表現に一致するタイトルパターン。
""デフォルトでは次の正規表現が設定されている。
"let QFixHowm_Replace_Title_Pattern = '^'.g:QFixHowm_Title.'\s*$'

"新規エントリの際、本文から書き始める。
"let QFixHowm_Cmd_New = "i".QFixHowm_Title." \<CR>\<C-r>=strftime(\"[%Y-%m-%d%H:%M]\")\<CR>\<CR>\<ESC>$"
"",Cで挿入される新規エントリのコマンド
"let QFixHowm_Key_Cmd_C = "o<ESC>".QFixHowm_Cmd_New

" }}}


"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" 2015-03-28

" Installation check.
if neobundle#exists_not_installed_bundles()
  echomsg 'Not installed bundles : ' .
          \ string(neobundle#get_not_installed_bundle_names())
  echomsg 'Please execute ":NeoBundleInstall" command.'
              "finish
endif

" すべての数値を10進数と考える"
set nrformats =

"" 終了するときにファイル情報を保存する
autocmd BufWinLeave *? silent mkview
autocmd BufWinEnter *? silent loadview

"" commentを自動で挿入しない
set formatoptions-=r
------------------------------------------------------------------------------------------------------------------------------------------------
cohama        : L456 formatoptions は直でこういう風に書いても ftplugin で無効にされちゃうことがあるんだよなぁ...。  03/28 23:22
                結論 ftplugin が悪い  03/28 23:22
------------------------------------------------------------------------------------------------------------------------------------------------

"" "%"の拡張
runtime macros/matchit.vim
runtime macros/editexisting.vim


" quickrun.vim 用設定
let g:quickrun_config['python.test'] = {'command': 'nosetests', 'exec': ['%c -v %s']}
let g:quickrun_config['python'] = {'command': 'python3'}

let g:quickrun_config['maxima'] = {'command': 'maxima', 'exec': ['%c -b %s']}
" blockdiag
let g:quickrun_config['blockdiag'] = {
            \'command': 'blockdiag',
            \'exec': ['%c -a %s -o %{expand("%:r")}.png', 'display %{expand("%:r")}.png'],
            \'outputter':'message',
            \}

let g:quickrun_config['tex'] = {
            \'command': 'platex',
            \'exec': ['%c %s && dvipdfmx %{expand("%:r").dvi && evince'],
            \'outputter': 'message'
            \}

let g:quickrun_config['plantuml'] = {
            \'command': 'java',
            \'exec': [
                \'%c -jar ~/bin/plantuml.8020.jar %s -tpng',
                \'display %s:p:r.png'
                \],
            \'outputter': 'null'
            \}
------------------------------------------------------------------------------------------------------------------------------------------------
yassu0320     : ちょっとだけblockdiagのplugin宣伝https://bitbucket.org/yassu0320/blockdiagcontrib-tex  03/28 23:45
------------------------------------------------------------------------------------------------------------------------------------------------


"" task
let g:task_suffix = "task"
let g:task_path = "~/Dropbox/task/"
let g:task_date = "%Y/%m/%d(%a) %H:%M"
function! s:task_edit(...) "{{{
    " assume that len(a:000) <= 1
let l:advance = get(a:, 1, '0')
python << EOF
import vim
from datetime import datetime, timedelta

date = datetime.today()
advance_day = int(vim.eval('l:advance'))
date += timedelta(days=advance_day)
task_filename = '%02d' % date.year + '-%02d' % date.month + '-%02d' % date.day
task_filename += '.' + vim.eval('g:task_suffix')
vim.command("execute 'e' g:task_path . '{}'".format(task_filename))
EOF
endfunction
" }}}
command! -nargs=? TEdit call s:task_edit(<f-args>)
command! -nargs=1 TGrep :execute 'vimgrep' <f-args> g:task_path. '/*'

set makeprg=scons


NeoBundle 'yegappan/mru'
NeoBundle 'jlanzarotta/bufexplorer'
NeoBundle 'Yggdroot/indentLine'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'vim-scripts/maxima.vim'
NeoBundle 'mhaig/vim-blockdiag-series'
NeoBundle 'aklt/plantuml-syntax'
NeoBundle 'nicoraffo/conque'
NeoBundle 'rhysd/committia.vim'
NeoBundle 'yassu/todo-env.vim'
NeoBundle 'ngmy/vim-rubocop'


NeoBundle 'xolox/vim-session', {
    \ 'depends': 'xolox/vim-misc'
\}
" 現在のディレクトリ直下の .vimsessions/ を取得 
let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
" 存在すれば
if isdirectory(s:local_session_directory)
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vimを辞める時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
  let g:session_autoload = 'yes'
else
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
endif
unlet s:local_session_directory
command! SaveS :SaveSession

autocmd BufNewFile *.rb 0r ~/.vim/templates/rb.tpl


"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"

"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" 11  4月 2015

" Load vimrc from current directory and disable unsafe commands in them
set exrc
set secure

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" =============================================================================
" Terminal Interaction
" =============================================================================

" Prevent Vim from clearing the scrollback buffer
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Clear PAGER if Vim's Man function is needed
let $PAGER=''


" Don't reset cursor to start of line when moving around
set nostartofline

" Do not jump to the matching bracket upon bracket insert (default)
set noshowmatch


set stl+=%{fugitive#statusline()} " git via fugitive.vim
set gdefault   " Use global search by default

" Some file types use real tabs
au FileType {make,gitconfig} set noexpandtab sw=4

" Update syntax highlighting for more lines increased scrolling performance
syntax sync minlines=256

" Don't syntax highlight long lines
set synmaxcol=256


""
"" Smooth Scroll
""

noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 12, 2)<cr>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 14, 2)<cr>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 22, 4)<cr>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 24, 4)<cr>



"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
vim:ft=vim:
