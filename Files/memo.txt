au GUIEnter * set noicon guioptions-=T
:func-abort
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'https://github.com/alpaca-tc/alpaca_tags'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-endwise'
Bundle 'vim-scripts/java.vim'
Bundle 'vim-scripts/javacomplete'
Bundle 'vim-scripts/java_getset.vim'
Bundle 'vim-scripts/java_checkstyle.vim'
Bundle 'tsukkee/unite-tag'
Bundle 'alpaca-tc/neorspec.vim'
Bundle 'https://github.com/thoughtbot/vim-rspec'
Bundle 'https://github.com/tpope/vim-dispatch'
Bundle 'AndrewRadev/switch.vim'
Bundle 'alpaca-tc/vim-endwise.git'

lexima

"- - -"

set autoread
set complete=.,w,b,u,k
set completeopt=menu,preview,longest
set pumheight=20
set foldmethod=manual
au FileType go compiler go
"改行コード
set fileformats=unix,dos,mac
"補完候補があってもEnterは改行
inoremap <expr> <CR> pumvisible() ? "\<C-e>\<CR>" : "\<CR>"
" text object
nnoremap gc `[v`]
onoremap gc :normal gc<CR>

onoremap <silent> q
\      :for i in range(v:count1)
\ <Bar>   call search('.\&\(\k\<Bar>\_s\)\@!', 'W')
\ <Bar> endfor<CR>

function! OverridePaste(type, ...) "{{{
    if a:0
        silent execute "normal! `<" . a:type . "`>\"xp"
    elseif a:type == 'line'
        silent execute "normal! '[V']\"xp"
    elseif a:type == 'block'
        silent execute "normal! `[\<C-V>`]\"xp"
    else
        silent execute "normal! `[v`]\"xp"
    endif
endfunction "}}}
nnoremap <C-p> :<C-u>set opfunc=OverridePaste<CR>g@
nnoremap <C-p><C-p> :<C-u>set opfunc=OverridePaste<CR>g@g@

" インデント選択
function! VisualCurrentIndentBlock(type) "{{{
    let current_indent = indent('.')
    let current_line   = line('.')
    let current_col    = col('.')
    let last_line      = line('$')

    let start_line = current_line
    while start_line != 1 && current_indent <= indent(start_line) || getline(start_line) == ''
        let start_line -= 1
    endwhile
    if a:type ==# 'i'
        let start_line += 1
    endif

    let end_line = current_line
    while end_line != last_line && current_indent <= indent(end_line) || getline(end_line) == ''
        let end_line += 1
    endwhile
    if a:type ==# 'i'
        let end_line -= 1
    endif

    call cursor(start_line, current_col)
    normal! V
    call cursor(end_line, current_col)
endfunction "}}}
nnoremap vii :call VisualCurrentIndentBlock('i')<CR>
nnoremap vai :call VisualCurrentIndentBlock('a')<CR>
onoremap ii :normal vii<CR>
onoremap ai :normal vai<CR>

autocmd FileType perl set isfname-=- isfname-=/ isfname-=+
set includeexpr=substitute(v:fname,'^\\/','','')

noremap <C-j><C-R> :Unite file_mru<CR>
NeoBundle 'thinca/vim-localrc'
NeoBundle 'vim-scripts/closetag.vim'
NeoBundle 'vim-scripts/errormarker.vim'
NeoBundle 'ack.vim'
NeoBundle 'mattn/vimplenote-vim'
NeoBundle 'toritori0318/vim-redmine'
NeoBundle 'taglist.vim'
NeoBundle 'airblade/vim-rooter'
NeoBundle 'othree/eregex.vim'
NeoBundle 'motemen/xslate-vim'
NeoBundle 'mattn/sonictemplate-vim'
NeoBundle 'chase/vim-ansible-yaml'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'gre/play2vim'
NeoBundle 'leafgarland/typescript-vim'
NeoBundle 'clausreinke/typescript-tools'
NeoBundle 'sorah/unite-ghq'

L421 これは poslist.vim 案件  12/14 00:00


NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'bling/vim-airline'
NeoBundle 'jceb/vim-hier'
NeoBundle 'dannyob/quickfixstatus'
NeoBundle "osyo-manga/shabadou.vim"
NeoBundle "osyo-manga/vim-watchdogs"
NeoBundle "motemen/vim-guess-abbrev"
NeoBundle 'kana/vim-fakeclip'
NeoBundle 'gcmt/wildfire.vim'
NeoBundle "syui/airsave.vim"
NeoBundle 'mileszs/ack.vim'
NeoBundle 'motemen/vim-help-random'
NeoBundle 'sgur/unite-qf'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'sgur/unite-git_grep'

http://step-learn.com/markdown/index.html


set indentexpr&
NeoBundle 'thinca/vim-showtime'
                L288 visualstar.vim 案件  12/27 23:24
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>



" ファイルをtree表示してくれる
NeoBundle 'scrooloose/nerdtree'
" コメントON/OFFを手軽に実行
NeoBundle 'tomtom/tcomment_vim'
" 行末の半角スペースを可視化(うまく動かない？)
NeoBundle 'bronson/vim-trailing-whitespace'
" less用のsyntaxハイライト
NeoBundle 'KohPoll/vim-less'
""""""""""""""""""""""""""""""
" 全角スペースの表示
""""""""""""""""""""""""""""""
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        autocmd ColorScheme * call ZenkakuSpace()
        autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
    augroup END
    call ZenkakuSpace()
endif
