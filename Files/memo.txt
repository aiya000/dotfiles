" Yosa

"補完候補があってもEnterは改行
inoremap <expr> <CR> pumvisible() ? "\<C-e>\<CR>" : "\<CR>"

" text object
nnoremap gc `[v`]
onoremap gc :normal gc<CR>

"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"

Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'vim-scripts/java.vim'
Bundle 'vim-scripts/javacomplete'
Bundle 'vim-scripts/java_getset.vim'
Bundle 'vim-scripts/java_checkstyle.vim'

lexima

"- - -"

set complete=.,w,b,u,k
set completeopt=menu,preview,longest
set pumheight=20
set foldmethod=manual
au FileType go compiler go

onoremap <silent> q
\      :for i in range(v:count1)
\ <Bar>   call search('.\&\(\k\<Bar>\_s\)\@!', 'W')
\ <Bar> endfor<CR>

function! OverridePaste(type, ...) "{{{
    if a:0
        silent execute "normal! `<" . a:type . "`>\"xp"
    elseif a:type == 'line'
        silent execute "normal! '[V']\"xp"
    elseif a:type == 'block'
        silent execute "normal! `[\<C-V>`]\"xp"
    else
        silent execute "normal! `[v`]\"xp"
    endif
endfunction "}}}
nnoremap <C-p> :<C-u>set opfunc=OverridePaste<CR>g@
nnoremap <C-p><C-p> :<C-u>set opfunc=OverridePaste<CR>g@g@

" インデント選択
function! VisualCurrentIndentBlock(type) "{{{
    let current_indent = indent('.')
    let current_line   = line('.')
    let current_col    = col('.')
    let last_line      = line('$')

    let start_line = current_line
    while start_line != 1 && current_indent <= indent(start_line) || getline(start_line) == ''
        let start_line -= 1
    endwhile
    if a:type ==# 'i'
        let start_line += 1
    endif

    let end_line = current_line
    while end_line != last_line && current_indent <= indent(end_line) || getline(end_line) == ''
        let end_line += 1
    endwhile
    if a:type ==# 'i'
        let end_line -= 1
    endif

    call cursor(start_line, current_col)
    normal! V
    call cursor(end_line, current_col)
endfunction "}}}
nnoremap vii :call VisualCurrentIndentBlock('i')<CR>
nnoremap vai :call VisualCurrentIndentBlock('a')<CR>
onoremap ii :normal vii<CR>
onoremap ai :normal vai<CR>

autocmd FileType perl set isfname-=- isfname-=/ isfname-=+
set includeexpr=substitute(v:fname,'^\\/','','')

noremap <C-j><C-R> :Unite file_mru<CR>
NeoBundle 'thinca/vim-localrc'
NeoBundle 'vim-scripts/closetag.vim'
NeoBundle 'vim-scripts/errormarker.vim'
NeoBundle 'ack.vim'
NeoBundle 'mattn/vimplenote-vim'
NeoBundle 'toritori0318/vim-redmine'
NeoBundle 'taglist.vim'
NeoBundle 'airblade/vim-rooter'
NeoBundle 'othree/eregex.vim'
NeoBundle 'motemen/xslate-vim'
NeoBundle 'mattn/sonictemplate-vim'
NeoBundle 'chase/vim-ansible-yaml'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'gre/play2vim'
NeoBundle 'leafgarland/typescript-vim'
NeoBundle 'clausreinke/typescript-tools'
NeoBundle 'sorah/unite-ghq'

L421 これは poslist.vim 案件  12/14 00:00


NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'bling/vim-airline'
NeoBundle 'jceb/vim-hier'
NeoBundle 'dannyob/quickfixstatus'
NeoBundle "osyo-manga/shabadou.vim"
NeoBundle "osyo-manga/vim-watchdogs"
NeoBundle "motemen/vim-guess-abbrev"
NeoBundle 'kana/vim-fakeclip'
NeoBundle 'gcmt/wildfire.vim'
NeoBundle "syui/airsave.vim"
NeoBundle 'mileszs/ack.vim'
NeoBundle 'motemen/vim-help-random'
NeoBundle 'sgur/unite-qf'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'sgur/unite-git_grep'

http://step-learn.com/markdown/index.html


set indentexpr&
NeoBundle 'thinca/vim-showtime'
                L288 visualstar.vim 案件  12/27 23:24
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>



" ファイルをtree表示してくれる
NeoBundle 'scrooloose/nerdtree'
" コメントON/OFFを手軽に実行
NeoBundle 'tomtom/tcomment_vim'
" 行末の半角スペースを可視化(うまく動かない？)
NeoBundle 'bronson/vim-trailing-whitespace'
" less用のsyntaxハイライト
NeoBundle 'KohPoll/vim-less'
""""""""""""""""""""""""""""""
" 全角スペースの表示
""""""""""""""""""""""""""""""
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        autocmd ColorScheme * call ZenkakuSpace()
        autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
    augroup END
    call ZenkakuSpace()
endif


------------------------------------------------------------------------------------------------------------------------------------------------
deris0126     : L105 80文字への執念を感じると思ったら…  01/17 23:05
------------------------------------------------------------------------------------------------------------------------------------------------
"set cpo+=a " :read  command with a file name arg will modify the window's alternate file name
( {{{
" Settings for Vi-compatible behavior (Vim default: aABceFs)
" Note: this list is not exhaustive. See :h 'cpo'
 set cpoptions=
"set cpo+=a " :read  command with a file name arg will modify the window's alternate file name
"set cpo+=A " :write command with a file name arg will modify the window's alternate file name
 set cpo+=B " Give backslash no special meaning in mappings, abbreviations and the 'to' part of the menu commands
 set cpo+=c " Searching continues at the end of any match at the cursor position, but not further than the start of the next line
 set cpo+=e " When executing a register with ':@r', always add a <CR> to the last line even when the register is not linewise
 set cpo+=F " :write with a file name argument will set the file name for the current buffer if it doesn't have one already
"set cpo+=i " Interrupting the reading of a file will leave it modified.
 set cpo+=K " Don't wait for a key code to complete
"set cpo+=m " 'Showmatch' will always wait half a second, even if a character is typed within that time period
 set cpo+=q " Joining multiple lines leaves the cursor where it would be when joining two lines
"set cpo+=s " Set buffer options when first entering the buffer instead of when it's created
"set cpo+=t " Search pattern for the tag command is remembered for 'n' command
 set cpo+={ " The |{| and |}| commands also stop at a '{' character at the start of a line.
) }}}
------------------------------------------------------------------------------------------------------------------------------------------------
deris0126     : 人生諦めが肝心というのがわかる  01/17 23:05
thinca        : 何を諦めたんです?  01/17 23:06
deris0126     : 1行80文字で揃えるのを… > 何を諦めたんです?  01/17 23:07
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : L67 これってバッファ毎の設定だったと思うんだよなぁ、多分  01/17 23:12
miyako        : L67: 画面外もシンタックスハイライトしてる？  01/17 23:14
------------------------------------------------------------------------------------------------------------------------------------------------
" Syntax Highlighting:
syntax enable                                      " Turn on syntax highlighting
syntax sync minlines=256            " Update syntax highlighting for more lines
set synmaxcol=512                            " Don't syntax highlight long lines
" Default paren match highting is too distracting
highlight! link MatchParen Comment

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : えーと、syntax はある程度バッファを遡ってそこから syntax を適用していくんですが、どれくらいまで遡るかってことです  01/17 23:15
                例えば 51 行まで遡ったら実はそこからコメントアウトが開始されていたとしても、50行までしか遡らない設定だったらそこはコメントとはハイライトされない、みたいな感じ  01/17 23:16
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : あ、なるほど。短すぎるとsyntaxが正しく解釈できないんですね。ありがとうございます。> thincaさん  01/17 23:16
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : ちなみに最強は syntax sync fromstart です。お察しの通り常にバッファの先頭から解釈する。当然バッファがでかくなれば重くなる  01/17 23:18
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : fromstartやばいですねwww  01/17 23:19
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : しかし確実に正しく(もちろんsyntax定義の範囲内で)ハイライトされるので、私はたまに使っちゃう  01/17 23:19
                これそもそも良くないのが、これバッファ毎で、大体 syntax 定義内に書かれてるのだよね。ユーザーコントロールする手段欲しい感ある。Syntax イベントで上書き設定しろってことなのかもしれないけど  01/17 23:20
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : え、そうだったんですか・・・ >  syntax 定義内に書かれてる  01/17 23:21
------------------------------------------------------------------------------------------------------------------------------------------------
haya14busa    : markdownで頻繁にシンタクス壊れるのでいじりたい  01/17 23:21
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : あ、これが原因だったんですね > markdownで頻繁にシンタクス壊れる  01/17 23:22
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : autocmd Syntax markdown syntax sync fromstart
                これでもしかしたら改善されるかもわからん  01/17 23:25
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : comments オプションはだいたいバッファ毎なので、ftplugin がしっかりしていれば定義されていたりしますね  01/17 23:23
                あとはシンクロナイズパターンを設定することによりよさが生まれる可能性がある  01/17 23:27
                :help :syn-sync-fourth  01/17 23:27
thinca        : 正直何言ってるのかわかkらんレベルの難しさがあり、常人に設定するのは困難感を醸し出している  01/17 23:28
------------------------------------------------------------------------------------------------------------------------------------------------
set comments-=s1:/*,mb:*,ex:*/                        " /* Make C-style comments
set comments+=s:/*,mb:\ *,ex:\ */                     "  * wrap like this
set comments+=fb:*                                    "  */

function! SourceMe(...)
    let a_reg = @a
    norm! `["ay`]
    echo ''
    exe @a
    let @a = a_reg
endfunction
nnoremap <silent> <Leader>sl :set opfunc=SourceMe<CR>g@

nnoremap <silent> m :<C-U>update!<CR>

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : L191- ほほう? 興味深い設定  01/17 23:39
thinca        : L191 やると多分挿入モードで複数キーシーケンスのキーマッピングが使えなくなる  01/17 23:43
haya14busa    : L191 insertモードからのjj復帰が出来ないことに気づいた  01/17 23:44
------------------------------------------------------------------------------------------------------------------------------------------------
    " Remove small delay between pressing Esc and entering Normal mode.
    set timeout ttimeout ttimeoutlen=-1
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : 今自分の設定確認したら <C-g><C-u> で直前に入力した単語を全て大文字にするキーマッピングが施されていた  01/17 23:45
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
hujo          : L417 便利そう  01/17 23:51
------------------------------------------------------------------------------------------------------------------------------------------------
    " start command line window in insert mode and no line numbers
    autocmd CmdwinEnter * startinsert
    autocmd CmdwinEnter * setl nonumber
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$")
                \| execute "normal g'\"" | endif

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : arpeggio.vim の出番と聞いて >2本指  01/18 00:03
thinca        : arpeggio.vim は同時押しによるキーマッピングを実現する神のプラグインです  01/18 00:05
thinca        : jk をほぼ同時に押した場合のみ発動し、普段は j と k は普通に打てる、みたいなことができる(ただし色々とややこしくなる部分もある)  01/18 00:05
deris0126     : arpeggio.vim便利なのわかってるけど、あれに依存すると素Vimで設定出来ないときなく未来が見えたので、使うのやめてしまった  01/18 00:06
kamichidu     : 便利そうだけど、同時押しはキータッチのリズムが気になってしまう  01/18 00:07
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
haya14busa    : L236 なるほどそんな手があるのか...すごい  01/18 00:08
------------------------------------------------------------------------------------------------------------------------------------------------

https://github.com/kana/vim-niceblock
set nrformats=hex,alpha                     " Accepted bases for <C-A> and <C-X>

------------------------------------------------------------------------------------------------
http://d.hatena.ne.jp/osyo-manga/20120118/1326838173
------------------------------------------------------------------------------------------------


" --- --- --- "
2015年01月24日 23時01分41秒
" --- --- --- "

set backupext=.bak
set backupskip+=*/shm/*
set nowritebackup

" A few very important custom digraphs
if has('digraphs')
  digraph ./ 8230  " Ellipsis (HORIZONTAL ELLIPSIS U+2026)
  digraph %% 8984  " Mac command key (PLACE OF INTEREST SIGN U+2318)
  digraph 8: 9731  " Snowman (SNOWMAN U+2603)
endif

" Insert four spaces when Tab is pressed
set softtabstop=4
" Indent intelligently to 'shiftwidth' at the starts of lines with Tab, but
" use 'tabstop' everywhere else
set smarttab
" When indenting lines with < or >, round the indent to a multiple of
" 'shiftwidth', so even if the line is indented by one space it will indent
" up to 4 and down to 0, for example
set shiftround
" Don't join lines with two spaces at the end of sentences; I don't two-space,
" despite the noble Steve Losh's exhortations
set nojoinspaces


----------------------------------------------------------------------------------------------------------------------------------------------------------------
 aiya000      : includeされるの保管できるのすごい、賢こVim。  01/24 23:12
 thinca       : それを使うことで Java の import もざっくり辿ることができなくもない  01/24 23:13
 rbtnn        : L429 KをNOPにしているのか、もったいない  01/24 23:13
 aiya000      : えっ、そうなんですね！？
                Vimすごい。  01/24 23:13
 thinca       : :help 'includeexpr'  01/24 23:14
 kamichidu    : &path にclasspath設定しないといけなかったり、.jarとかは対応してないのでつらいところはある  01/24 23:16
----------------------------------------------------------------------------------------------------------------------------------------------------------------


st formatoptions+=j

" Preserve the flags for a pattern when repeating a substitution with &; I don't
" really understand why this isn't a default, but there it is
nnoremap & :&&<CR>
vnoremap & :&&<CR>

" Try to run the version of matchit.vim included in the distribution, if there
" is one; extends % to match more than it does by default
silent! runtime macros/matchit.vim

" Don't use modelines at all, they're apparently potential security problems
" and I've never used them anyway
set nomodeline

" Don't assume a number with a leading zero is octal; it's far more likely a
" zero-padded decimal, so increment and decrement with ^A and ^X on that basis
set nrformats-=octal

" Don't use modelines at all, they're apparently potential security problems
" and I've never used them anyway
set nomodeline

" Don't keep .viminfo information for files in temporary directories or shared
" memory filesystems; this is because they're used as scratch spaces for tools
" like sudoedit(8) and pass(1) and hence could present a security problem
if has('viminfo') && has('autocmd')
  augroup viminfoskip
    autocmd!
    silent! autocmd BufNewFile,BufReadPre
        \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
        \ setlocal viminfo=
  augroup END
endif

" Don't bother about checking whether Escape is being used as a means to enter
" a Meta-key combination, just register Escape immediately
set noesckeys

" set eventignore

" Don't resize windows we're not splitting (Tmux-like; think Mondrian)
set noequalalways

" Only show the tab bar if there's more than one tab
if exists('&showtabline')
  set showtabline=1
endif

" Use the tilde as an operator with motions, rather than just swapping the
" case of the character under the cursor
set tildeop

----------------------------------------------------------------------------------------------------------------------------------------------------------------
thinca       : :command でコマンドを定義した場合に定義内で使えるやつですね ><bang>  01/24 23:42
thinca       : :help <bang>  01/24 23:42
thinca       : bang がコマンドに与えられたかどうかを式で判定するエディオムもあります。
               function MyCommand(is_bang)
                 " ...
               endfunction
               command -bang MyCommand call MyCommand(<bang>0)  01/24 23:46
               <bang>0 とすることで、! が与えられると !0 になって 1 になります  01/24 23:46
----------------------------------------------------------------------------------------------------------------------------------------------------------------

" Get rid of visually noisy folding characters
if has('folding')
  let &fillchars = 'diff: ,fold: ,vert: '
endif

" Don't write the output of :make to the terminal
set shellpipe=>

" Allow jumping between windows and tabs to find an open instance of a given
" buffer with :sbuffer.
if v:version >= 701
  set switchbuf=useopen,usetab
else
  set switchbuf=useopen
endif

" Threshold is 10 MB in size
let g:bigfilesize = 10 * 1024 * 1024

setlocal synmaxcol=256


"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" mtth


let g:netrw_home = g:runtimepath . '/cache/netrw'                             " cache directory for file explorer
let g:netrw_banner = 0                                                        " hide help banner (can be shown with `I`)

"NOTE: mtth's plugins

" Compile
https://github.com/mtth/compile.vim
let g:compile_default_flags = {
\ 'rst2html': '--stylesheet-path=b.css,p/default.css % &%:r.html',
\ 'haml': '% &%:r.html',
\ 'jade': '%',
\ 'coffee': '%',
\ 'hamlc': '--input %:h --output &%:h/jst.js',
\ 'stylus': '%',
\ 'cc': '% -o &%:r'
\ }

" Cursorcross
https://github.com/mtth/cursorcross.vim

https://github.com/mtth/scratch.vim

"NOTE: plugins
" Locate
" Ultisnips
" Virtualenv
" Solarized
let g:solarized_termtrans = 1                                               " transparent background sometimes
let g:solarized_visibility = 'normal'                                       " visibility of 'list' characters



set diffopt=filler,vertical
set eadirection=hor                                                         " only resize automatically horizontally (cf. ``equalalways`` option)
set nostartofline                                                           " keeps cursor on current column for movements like H, M, ...
set shellredir=>%s\ 2>&1                                                    " otherwise syntastic isn't able to pick up checker versions
set comments-=:%                                                            " these shouldn't be considered comments by default
set formatlistpat=^\\s*\\(\\d\\(\\d\\ze\\d*[\\]:.)}]\\\|[\\]:.)}]\\ze\\)\\\|:[^:]\\ze[^:]*:\\\|[*+-]\\)\\s
if v:version >=# 704
  set formatoptions=rqnlj                                                   " only manual formatting by default
else
  set formatoptions=rqnl                                                    " j option not supported before 7.4
endif
let &dictionary = '/usr/share/dict/words,'                                  " files where to load word for dictionary
let &dictionary .= g:runtimepath . '/spell/custom.utf-8.add'                " completion for use with <c-x><c-k>


haya14busa   : visual-star案件だ  03/08 00:10
" enable search for selected text, forwards (*) or backwards (#)
xnoremap <silent> * :<c-u>
  \let old_reg=getreg('"')<bar>let old_regtype=getregtype('"')<cr>
  \gvy/<c-r>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<cr><cr>
  \:call setreg('"', old_reg, old_regtype)<cr>
xnoremap <silent> # :<c-u>
  \let old_reg=getreg('"')<bar>let old_regtype=getregtype('"')<cr>
  \gvy?<c-r>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<cr><cr>
  \:call setreg('"', old_reg, old_regtype)<cr>

" easier indentation in visual mode
xnoremap > >gv
xnoremap < <gv
" arglist
nnoremap <leader>a :args<cr>
" show locations of latest changes
nnoremap <leader>J :changes<cr>
" show latest jumps
nnoremap <leader>j :jumps<cr>
" browse oldfiles
nnoremap <leader>o :browse oldfiles<cr>
" copy to tmux buffer
xnoremap <leader>t :w !tmux loadb -<cr>

" open .vimrc (following potential symbolic link)
nnoremap <leader>ve :tabnew <c-r>=resolve(expand($MYVIMRC))<cr><cr>:help<cr><c-w>L:vertical resize 80<cr>:set winfixwidth<cr><c-w>h
"source .vimrc (and rerun any filetype settings)
nnoremap <leader>vs :source $MYVIMRC<cr>:filetype detect<cr>


" smart indentation
inoremap <expr> <s-tab> <SID>smart_tab()
function! s:smart_tab() "{{{
  " fills in line with character before cursor until one of the following
  " * matches indent of characters preceded by two or more whitespace characters
  "   in the first non-empty line above
  " * texwidth
  " * next tabstop
  " if the current line is empty, the fill character will be a single space
  let [buf_name, line_number, col_number, off_number] = getpos('.')
  let cur_line = getline(line_number)
  if strlen(cur_line)
    let fill_char = cur_line[col('.') - 2]
  else
    let fill_char = ' '
  endif
  let line_content = ''
  while !strlen(line_content) && line_number >=# 1
    let line_number -= 1
    let line_content = getline(line_number)
  endwhile
  let line_content = line_content[col('.') - 1:]
  let offset = match(line_content, '\s\s\zs\S\|$')
  if offset ># 0
    return repeat(fill_char, offset)
  elseif &textwidth && col_number <=# &textwidth
    return repeat(fill_char, &textwidth - col_number + 1)
  else
    return repeat(fill_char, &tabstop - (col_number - 1) % &tabstop)
  endif
endfunction "}}}
" expand inline parenthesis arguments to multiline
nnoremap gJ 0f(a<cr><esc>f)i<cr><esc>kI<tab><esc>0dw:s/\v,\s+/,\r/g<cr>``<c-v>``I<c-r>"<esc>``A



"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
" hotchpotch

Bundle 'ciaranm/detectindent'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86" || &term =~ "xterm-256color"
 set t_Co=16
 set t_Sf=[3%dm
 set t_Sb=[4%dm
endif

if &term =~ "screen"
  " screen Buffer 切り替えで screen にファイル名を表示
  autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | silent! exe '!echo -n "kv:%\\"' | endif
  autocmd VimLeave * silent! exe '!echo -n "kvim\\"'
endif

" command line で command window 開く
set cedit=<C-O>

" str2numchar.vim
" 範囲選択してる文字列を変換
vnoremap <silent> sn :Stn2NumChar<CR> " あ => &#12354;
vnoremap <silent> sh :Str2HexLiteral<CR> " あ => \\xE3\\x81\\x82

" 適当なテンポラリファイルの作成
command! -nargs=0 NewTmp :new `=tempname().'.vim'`

" ウィンドウの高さを選択範囲と同じになるよう調整
vnoremap <silent> _ <Esc>`<zt:execute (line("'>") - line("'<") + 1) 'wincmd' '_'<Return>

++enc

" yanktmp.vim
noremap <silent> sy :call YanktmpYank()<CR>
noremap <silent> sp :call YanktmpPaste_p()<CR>

" 第二引数取れるのかー
system("pbcopy", @0)

set nofsync
set grepprg=internal

" 検索レジストリに入ってる文字で現在のファイルを検索し、quickfix で開く
nnoremap <unique> g/ :exec ':vimgrep /' . getreg('/') . '/j %\|cwin'<CR>
" G/ ではすべてのバッファ
" nnoremap <unique> G/ :silent exec ':cexpr "" \| :bufdo vimgrepadd /' . getreg('/') . '/j %'<CR>\|:silent cwin<CR>

" バッファから検索
function! Bgrep(word)
  cexpr '' " quickfix を空に
  silent exec ':bufdo | try | vimgrepadd ' . a:word . ' % | catch | endtry'
  silent cwin
endfunction
command! -nargs=1 Bgrep :call Bgrep(<f-args>)

" 引数の文字列を、ディレクトリ配下から再帰的に検索
function! Findgrep(arg)
  let findgrep_cmd = 'find . -type f ! -regex ".*\.svn.*" ! -regex ".*\.git.*" ! -regex ".*\.sw.*" ! -regex ".*tags" -print0 |xargs -0 grep -n '
  cgetexpr system(findgrep_cmd . a:arg)
  silent cwin
endfunction
command! -nargs=1 Findgrep :call Findgrep(<f-args>)

" changelog
let g:changelog_username = "Yuichi Tateno"
let g:changelog_dateformat = '== %Y-%m-%d'
let g:changelog_new_entry_format= '  * %c'

" ack.vim 
let g:AckAllFiles=0

" - も fname に含む
autocmd BufRead * setlocal isfname+=- " どこかの plugin で上書きされてる？
set isfname+=-

" QuickFix のサイズ調整,自動で抜ける 
function! s:autoCloseQuickFix()
  let qllen = min([10, len(getqflist())])
  cclose
  if qllen
    execute 'cw' . qllen
    normal <C-W><C-W>
  endif
  redraw
endfunction
autocmd QuickFixCmdPost * :call s:autoCloseQuickFix()
" quickfix を閉じる
nnoremap <unique> ec :cclose<CR>

" jptemplate.vim
let g:jpTemplateKey = '<Tab>'

" {{{ QFixHowm.vim
let QFixHowm_Key = 'g'
if has('win32')
  let howm_dir             = 'c:/dropbox/My Dropbox/howm'
  let QFixHowm_MruFile     = 'c:/dropbox/My Dropbox/howm/.howm-mru'
else
  let howm_dir             = '~/Dropbox/howm'
  let QFixHowm_MruFile     = '~/Dropbox/howm/.howm-mru'
end
let howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.howm'
let howm_fileencoding    = 'utf-8'
let howm_fileformat      = 'unix'
let QFixHowm_MruFileMax = 50
let QFixHowm_Title = '='
" let disable_MyQFix = 1

"タイトルに何も書かれていない場合、エントリ内から適当な文を探して設定する。
""文字数は半角換算で最大 QFixHowm_Replace_Title_len 文字まで使用する。0なら何もしない。
"let QFixHowm_Replace_Title_Len = 64

"対象になるのは QFixHowm_Replace_Title_Pattern
"の正規表現に一致するタイトルパターン。
""デフォルトでは次の正規表現が設定されている。
"let QFixHowm_Replace_Title_Pattern = '^'.g:QFixHowm_Title.'\s*$'

"新規エントリの際、本文から書き始める。
"let QFixHowm_Cmd_New = "i".QFixHowm_Title." \<CR>\<C-r>=strftime(\"[%Y-%m-%d%H:%M]\")\<CR>\<CR>\<ESC>$"
"",Cで挿入される新規エントリのコマンド
"let QFixHowm_Key_Cmd_C = "o<ESC>".QFixHowm_Cmd_New

" }}}


"#-=- -=- -=- -=- -=- -=- -=- -=- -=-#"
vim:ft=vim:
