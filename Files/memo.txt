au GUIEnter * set noicon guioptions-=T
:func-abort
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'https://github.com/alpaca-tc/alpaca_tags'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-endwise'
Bundle 'vim-scripts/java.vim'
Bundle 'vim-scripts/javacomplete'
Bundle 'vim-scripts/java_getset.vim'
Bundle 'vim-scripts/java_checkstyle.vim'
Bundle 'tsukkee/unite-tag'
Bundle 'alpaca-tc/neorspec.vim'
Bundle 'https://github.com/thoughtbot/vim-rspec'
Bundle 'https://github.com/tpope/vim-dispatch'
Bundle 'AndrewRadev/switch.vim'
Bundle 'alpaca-tc/vim-endwise.git'

lexima

"- - -"

set autoread
set complete=.,w,b,u,k
set completeopt=menu,preview,longest
set pumheight=20
set foldmethod=manual
au FileType go compiler go
"改行コード
set fileformats=unix,dos,mac
"補完候補があってもEnterは改行
inoremap <expr> <CR> pumvisible() ? "\<C-e>\<CR>" : "\<CR>"
" text object
nnoremap gc `[v`]
onoremap gc :normal gc<CR>

onoremap <silent> q
\      :for i in range(v:count1)
\ <Bar>   call search('.\&\(\k\<Bar>\_s\)\@!', 'W')
\ <Bar> endfor<CR>

function! OverridePaste(type, ...) "{{{
    if a:0
        silent execute "normal! `<" . a:type . "`>\"xp"
    elseif a:type == 'line'
        silent execute "normal! '[V']\"xp"
    elseif a:type == 'block'
        silent execute "normal! `[\<C-V>`]\"xp"
    else
        silent execute "normal! `[v`]\"xp"
    endif
endfunction "}}}
nnoremap <C-p> :<C-u>set opfunc=OverridePaste<CR>g@
nnoremap <C-p><C-p> :<C-u>set opfunc=OverridePaste<CR>g@g@

" インデント選択
function! VisualCurrentIndentBlock(type) "{{{
    let current_indent = indent('.')
    let current_line   = line('.')
    let current_col    = col('.')
    let last_line      = line('$')

    let start_line = current_line
    while start_line != 1 && current_indent <= indent(start_line) || getline(start_line) == ''
        let start_line -= 1
    endwhile
    if a:type ==# 'i'
        let start_line += 1
    endif

    let end_line = current_line
    while end_line != last_line && current_indent <= indent(end_line) || getline(end_line) == ''
        let end_line += 1
    endwhile
    if a:type ==# 'i'
        let end_line -= 1
    endif

    call cursor(start_line, current_col)
    normal! V
    call cursor(end_line, current_col)
endfunction "}}}
nnoremap vii :call VisualCurrentIndentBlock('i')<CR>
nnoremap vai :call VisualCurrentIndentBlock('a')<CR>
onoremap ii :normal vii<CR>
onoremap ai :normal vai<CR>

autocmd FileType perl set isfname-=- isfname-=/ isfname-=+
set includeexpr=substitute(v:fname,'^\\/','','')

noremap <C-j><C-R> :Unite file_mru<CR>
NeoBundle 'thinca/vim-localrc'
NeoBundle 'vim-scripts/closetag.vim'
NeoBundle 'vim-scripts/errormarker.vim'
NeoBundle 'ack.vim'
NeoBundle 'mattn/vimplenote-vim'
NeoBundle 'toritori0318/vim-redmine'
NeoBundle 'taglist.vim'
NeoBundle 'airblade/vim-rooter'
NeoBundle 'othree/eregex.vim'
NeoBundle 'motemen/xslate-vim'
NeoBundle 'mattn/sonictemplate-vim'
NeoBundle 'chase/vim-ansible-yaml'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'gre/play2vim'
NeoBundle 'leafgarland/typescript-vim'
NeoBundle 'clausreinke/typescript-tools'
NeoBundle 'sorah/unite-ghq'

L421 これは poslist.vim 案件  12/14 00:00


NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'bling/vim-airline'
NeoBundle 'jceb/vim-hier'
NeoBundle 'dannyob/quickfixstatus'
NeoBundle "osyo-manga/shabadou.vim"
NeoBundle "osyo-manga/vim-watchdogs"
NeoBundle "motemen/vim-guess-abbrev"
NeoBundle 'kana/vim-fakeclip'
NeoBundle 'gcmt/wildfire.vim'
NeoBundle "syui/airsave.vim"
NeoBundle 'mileszs/ack.vim'
NeoBundle 'motemen/vim-help-random'
NeoBundle 'sgur/unite-qf'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'sgur/unite-git_grep'

http://step-learn.com/markdown/index.html


set indentexpr&
NeoBundle 'thinca/vim-showtime'
                L288 visualstar.vim 案件  12/27 23:24
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>



" ファイルをtree表示してくれる
NeoBundle 'scrooloose/nerdtree'
" コメントON/OFFを手軽に実行
NeoBundle 'tomtom/tcomment_vim'
" 行末の半角スペースを可視化(うまく動かない？)
NeoBundle 'bronson/vim-trailing-whitespace'
" less用のsyntaxハイライト
NeoBundle 'KohPoll/vim-less'
""""""""""""""""""""""""""""""
" 全角スペースの表示
""""""""""""""""""""""""""""""
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction

if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        autocmd ColorScheme * call ZenkakuSpace()
        autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace', '　')
    augroup END
    call ZenkakuSpace()
endif


------------------------------------------------------------------------------------------------------------------------------------------------
deris0126     : L105 80文字への執念を感じると思ったら…  01/17 23:05
------------------------------------------------------------------------------------------------------------------------------------------------
"set cpo+=a " :read  command with a file name arg will modify the window's alternate file name
( {{{
" Settings for Vi-compatible behavior (Vim default: aABceFs)
" Note: this list is not exhaustive. See :h 'cpo'
 set cpoptions=
"set cpo+=a " :read  command with a file name arg will modify the window's alternate file name
"set cpo+=A " :write command with a file name arg will modify the window's alternate file name
 set cpo+=B " Give backslash no special meaning in mappings, abbreviations and the 'to' part of the menu commands
 set cpo+=c " Searching continues at the end of any match at the cursor position, but not further than the start of the next line
 set cpo+=e " When executing a register with ':@r', always add a <CR> to the last line even when the register is not linewise
 set cpo+=F " :write with a file name argument will set the file name for the current buffer if it doesn't have one already
"set cpo+=i " Interrupting the reading of a file will leave it modified.
 set cpo+=K " Don't wait for a key code to complete
"set cpo+=m " 'Showmatch' will always wait half a second, even if a character is typed within that time period
 set cpo+=q " Joining multiple lines leaves the cursor where it would be when joining two lines
"set cpo+=s " Set buffer options when first entering the buffer instead of when it's created
"set cpo+=t " Search pattern for the tag command is remembered for 'n' command
 set cpo+={ " The |{| and |}| commands also stop at a '{' character at the start of a line.
) }}}
------------------------------------------------------------------------------------------------------------------------------------------------
deris0126     : 人生諦めが肝心というのがわかる  01/17 23:05
thinca        : 何を諦めたんです?  01/17 23:06
deris0126     : 1行80文字で揃えるのを… > 何を諦めたんです?  01/17 23:07
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : L67 これってバッファ毎の設定だったと思うんだよなぁ、多分  01/17 23:12
miyako        : L67: 画面外もシンタックスハイライトしてる？  01/17 23:14
------------------------------------------------------------------------------------------------------------------------------------------------
" Syntax Highlighting:
syntax enable                                      " Turn on syntax highlighting
syntax sync minlines=256            " Update syntax highlighting for more lines
set synmaxcol=512                            " Don't syntax highlight long lines
" Default paren match highting is too distracting
highlight! link MatchParen Comment

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : えーと、syntax はある程度バッファを遡ってそこから syntax を適用していくんですが、どれくらいまで遡るかってことです  01/17 23:15
                例えば 51 行まで遡ったら実はそこからコメントアウトが開始されていたとしても、50行までしか遡らない設定だったらそこはコメントとはハイライトされない、みたいな感じ  01/17 23:16
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : あ、なるほど。短すぎるとsyntaxが正しく解釈できないんですね。ありがとうございます。> thincaさん  01/17 23:16
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : ちなみに最強は syntax sync fromstart です。お察しの通り常にバッファの先頭から解釈する。当然バッファがでかくなれば重くなる  01/17 23:18
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : fromstartやばいですねwww  01/17 23:19
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : しかし確実に正しく(もちろんsyntax定義の範囲内で)ハイライトされるので、私はたまに使っちゃう  01/17 23:19
                これそもそも良くないのが、これバッファ毎で、大体 syntax 定義内に書かれてるのだよね。ユーザーコントロールする手段欲しい感ある。Syntax イベントで上書き設定しろってことなのかもしれないけど  01/17 23:20
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : え、そうだったんですか・・・ >  syntax 定義内に書かれてる  01/17 23:21
------------------------------------------------------------------------------------------------------------------------------------------------
haya14busa    : markdownで頻繁にシンタクス壊れるのでいじりたい  01/17 23:21
------------------------------------------------------------------------------------------------------------------------------------------------
miyako        : あ、これが原因だったんですね > markdownで頻繁にシンタクス壊れる  01/17 23:22
------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : autocmd Syntax markdown syntax sync fromstart
                これでもしかしたら改善されるかもわからん  01/17 23:25
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : comments オプションはだいたいバッファ毎なので、ftplugin がしっかりしていれば定義されていたりしますね  01/17 23:23
                あとはシンクロナイズパターンを設定することによりよさが生まれる可能性がある  01/17 23:27
                :help :syn-sync-fourth  01/17 23:27
thinca        : 正直何言ってるのかわかkらんレベルの難しさがあり、常人に設定するのは困難感を醸し出している  01/17 23:28
------------------------------------------------------------------------------------------------------------------------------------------------
set comments-=s1:/*,mb:*,ex:*/                        " /* Make C-style comments
set comments+=s:/*,mb:\ *,ex:\ */                     "  * wrap like this
set comments+=fb:*                                    "  */

function! SourceMe(...)
    let a_reg = @a
    norm! `["ay`]
    echo ''
    exe @a
    let @a = a_reg
endfunction
nnoremap <silent> <Leader>sl :set opfunc=SourceMe<CR>g@

nnoremap <silent> m :<C-U>update!<CR>

------------------------------------------------------------------------------------------------------------------------------------------------
deris0126     : L367-374 ココらへんはみんなkeymap設定したがるもんなのかなー。私も設定してるし  01/17 23:35
------------------------------------------------------------------------------------------------------------------------------------------------
" Hitting { and } constantly gets painful, and ^ and $ are too useful to be so
" inconvenient. Not sure what to do with the default H and L though. I use
" keepjumps in normal mode so H and L don't write to the jumplist, and add V to
" operator-pending mode so the motion acts linewise instead of characterwise
xnoremap L }
xnoremap H {
onoremap L V}
onoremap H V{
nnoremap <silent> L :<C-U>execute 'keepjumps normal!' v:count1 . '}'<CR>
nnoremap <silent> H :<C-U>execute 'keepjumps normal!' v:count1 . '{'<CR>
noremap { ^
noremap } $


------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : L191- ほほう? 興味深い設定  01/17 23:39
thinca        : L191 やると多分挿入モードで複数キーシーケンスのキーマッピングが使えなくなる  01/17 23:43
haya14busa    : L191 insertモードからのjj復帰が出来ないことに気づいた  01/17 23:44
------------------------------------------------------------------------------------------------------------------------------------------------
    " Remove small delay between pressing Esc and entering Normal mode.
    set timeout ttimeout ttimeoutlen=-1
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : 今自分の設定確認したら <C-g><C-u> で直前に入力した単語を全て大文字にするキーマッピングが施されていた  01/17 23:45
------------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : L236 一方私は :h<Space> が即座に開けるようにしていた  01/17 23:50
------------------------------------------------------------------------------------------------------------------------------------------------
" Open help in a vertical split instead of the default horizontal split
" " http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev h <C-R>=(getcmdtype()==':' && getcmdpos()==1 ? 'vert h' : 'h')<CR>
cabbrev help <C-R>=(getcmdtype()==':' && getcmdpos()==1 ? 'vert h' : 'help')<CR>

------------------------------------------------------------------------------------------------------------------------------------------------
hujo          : L417 便利そう  01/17 23:51
------------------------------------------------------------------------------------------------------------------------------------------------
    " start command line window in insert mode and no line numbers
    autocmd CmdwinEnter * startinsert
    autocmd CmdwinEnter * setl nonumber
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$")
                \| execute "normal g'\"" | endif

------------------------------------------------------------------------------------------------------------------------------------------------
thinca        : arpeggio.vim の出番と聞いて >2本指  01/18 00:03
thinca        : arpeggio.vim は同時押しによるキーマッピングを実現する神のプラグインです  01/18 00:05
thinca        : jk をほぼ同時に押した場合のみ発動し、普段は j と k は普通に打てる、みたいなことができる(ただし色々とややこしくなる部分もある)  01/18 00:05
deris0126     : arpeggio.vim便利なのわかってるけど、あれに依存すると素Vimで設定出来ないときなく未来が見えたので、使うのやめてしまった  01/18 00:06
kamichidu     : 便利そうだけど、同時押しはキータッチのリズムが気になってしまう  01/18 00:07
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
haya14busa    : L236 なるほどそんな手があるのか...すごい  01/18 00:08
------------------------------------------------------------------------------------------------------------------------------------------------
" Open help in a vertical split instead of the default horizontal split
" " http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev h <C-R>=(getcmdtype()==':' && getcmdpos()==1 ? 'vert h' : 'h')<CR>
cabbrev help <C-R>=(getcmdtype()==':' && getcmdpos()==1 ? 'vert h' : 'help')<CR>

https://github.com/kana/vim-niceblock
set updatecount=0
set infercase complete-=i completeopt=longest,menuone        " Insert completion
set nrformats=hex,alpha                     " Accepted bases for <C-A> and <C-X>
