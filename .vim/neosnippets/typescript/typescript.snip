include eslint.snip

# Syntaxes

snippet for_traditional
alias fort
abbr for (${1:let i = 0}; ${2:i < x}; ${3:i++}) {${0:#:here}}
    for (${1:let i = 0}; ${2:i < x}; ${3:i++}) {${0:#:here}}

snippet for_in
abbr for (const ${1:i} in ${2:xs}) {${0:#:here}}
    for (const ${1:i} in ${2:xs}) {${0:#:here}}

snippet for_of
alias for
abbr for (const ${1:x} of ${2:xs}) {${0:#:here}}
    for (const ${1:x} of ${2:xs}) {${0:#:here}}

snippet while
abbr while (${1:cond}) {${0:#:here}}
    while (${1:cond}) {${0:#:here}}

snippet switch
abbr switch (${1:name}) {${0:#:here}}
    switch (${1:name}) {${0:#:here}}

snippet case
abbr case ${1:constant}: ${0}
    case ${1:constant}: ${0}

snippet break
abbr break
    break

snippet throw_new_error
alias throw
abbr throw new Error(${0:#:here})
    throw new Error(${0:#:here})

snippet if
abbr if (${1:#:cond}) {${0:#:here}}
    if (${1:#:cond}) {${0:#:here}}

snippet else
abbr else {${0:#:here}}
    else {${0:#:here}}

snippet function
alias   fun
abbr function ${1:#:name}(${2:#:args}) {${0:#:here}}
    function ${1:#:name}(${2:#:args}) {${0:#:here}}

snippet async_function
alias afun
abbr async function ${1:#:name}(${2:#:args}) {${0:#:here}}
    async function ${1:#:name}(${2:#:args}) {${0:#:here}}

snippet generator_function
alias gfun
abbr function* ${1:#:name}(${2:#:args}) {${0:#:here}}
  function* ${1:#:name}(${2:#:args}) {${0:#:here}}

snippet async_generator_function
alias agfun
abbr async function* ${1:#:name}(${2:#:args}) {${0:#:here}}
  async function* ${1:#:name}(${2:#:args}) {${0:#:here}}

snippet arrow_function
alias ar
abbr (${1:#:args}) =>${0}
    (${1:#:args}) =>${0}

snippet async_arrow_function
alias aar
abbr async (${1:#:args}) =>${0}
    async (${1:#:args}) =>${0}

snippet method
alias met
abbr ${1:name}(${2:#:args}) {${0:#:here}}
    ${1:name}(${2:#:args}) {${0:#:here}}

snippet interface
alias inter
abbr interface ${1:Name} {${0:#:here}}
    interface ${1:Name} {${0:#:here}}

snippet type
abbr type ${1:Name} = ${0}
    type ${1:Name} = ${0}

snippet try
abbr try {${0:#:here}}
    try {${0:#:here}}

snippet catch
abbr catch (e) {${0:#:here}}
    catch (e) {${0:#:here}}

snippet finally
abbr finally {${0:#:here}}
    finally {${0:#:here}}

snippet import_as
alias imq
abbr import * as ${0} from '${1:#:here}'
    import * as ${0} from '${1:#:here}'

snippet import
alias imp
abbr import { ${0} } from '${1:#:here}'
    import { ${0} } from '${1:#:here}'

snippet import_default_export
alias import_default imd
abbr import ${0} from '${1:#:here}'
    import ${0} from '${1:#:here}'

snippet export
alias exp
abbr export
    export

snippet export_from
alias re_export
abbr export { ${1:#:stuff} } from '${0:module}'
    export { ${1:#:stuff} } from '${0:module}'

snippet const
abbr const ${1:x} = ${0}
  const ${1:x} = ${0}

snippet let
abbr let ${1:x} = ${0}
  let ${1:x} = ${0}

snippet instanceof
    instanceof

snippet typeof
    typeof

snippet public
    public

snippet private
    private

snippet readonly
    readonly

snippet enum
abbr enum ${1:Name} {${0:#:here}}
    enum ${1:Name} {${0:#:here}}

snippet class
alias cla
abbr class ${1:Name} {${0:#:here}}
    class ${1:Name} {${0:#:here}}

snippet constructor
    constructor(${1:#:args}) {${0:#:here}}

snippet namespace
abbr namespace ${1:Name} {${0:#:here}}
    namespace ${1:Name} {${0:#:here}}

snippet module
abbr module ${1:Name} {${0:#:here}}
    module ${1:Name} {${0:#:here}}

snippet declare
alias decl
abbr declare
    declare

snippet get
abbr get ${1:fieldName}(): ${2:type} {${0:#:here}}
    get ${1:fieldName}(): ${2:type} {${0:#:here}}

snippet set
abbr set ${1:fieldName}(x: ${2:type}) {${0:#:here}}
    set ${1:fieldName}(x: ${2:type}) {${0:#:here}}

snippet spread
abbr ...${0}
  ...${0}

snippet satisfies
alias sat
abbr satisfies
  satisfies

# Expressions

snippet println
alias pr
abbr console.log(${0:#:here})
    console.log(${0:#:here})

snippet print_error_ln
alias er
abbr console.error(${0:#:here})
    console.error(${0:#:here})

snippet stripLineBreaks
abbr .replace(/(?:\r\n|\r|\n)/g, '')
    .replace(/(?:\r\n|\r|\n)/g, '')

snippet stripMargings
abbr .replace(/^\s\+/g, '')
    .replace(/^\s\+/g, '')

snippet unify_spaces_to_one
abbr .replace(/\s+/g, ' ')
    .replace(/\s+/g, ' ')

snippet todo
abbr throw new Error('TODO (${0:somewhere})')
    throw new Error('TODO (${0:somewhere})')

snippet force_null
abbr null as any as string
    null as any as string

# Others

snippet reference
abbr /// <reference path='${0:d-ts-path}'/>
    /// <reference path='${0:d-ts-path}'/>

# Templates

snippet private_method
alias primet
abbr private ${1:name}(${2:#:args}): ${3:type} {${0:#:here}}
    private ${1:name}(${2:#:args}): ${3:void} {${0:#:here}}

snippet public_method
alias pubmet
abbr public ${1:name}(${2:#:args}): ${3:type} {${0:#:here}}
    public ${1:name}(${2:#:args}): ${3:void} {${0:#:here}}

snippet async_method
alias amet
abbr async ${1:name}(${2:#:args}): ${3:type} {${0:#:here}}
    async ${1:name}(${2:#:args}): Promise<${3:void}> {${0:#:here}}

snippet public_async_method
alias pubamet
abbr public async ${1:name}(${2:#:args}): ${3:type} {${0:#:here}}
    public async ${1:name}(${2:#:args}): Promise<${3:void}> {${0:#:here}}

snippet private_async_method
alias priamet
abbr private async ${1:name}(${2:#:args}): ${3:type} {${0:#:here}}
    private async ${1:name}(${2:#:args}): Promise<${3:void}> {${0:#:here}}

snippet public_static_async_method
alias pubsamet
abbr public static async ${1:name}(${2:#:args}): ${3:type} {${0:#:here}}
    public static async ${1:name}(${2:#:args}): Promise<${3:void}> {${0:#:here}}

snippet private_static_async_method
alias prisamet
abbr private static async ${1:name}(${2:#:args}): ${3:type} {${0:#:here}}
    private static async ${1:name}(${2:#:args}): Promise<${3:void}> {${0:#:here}}

snippet public_readonly
alias pubre
abbr public readonly
    public readonly

snippet private_readonly
alias prire
abbr private readonly
    private readonly

snippet pub
abbr public
    public

snippet pri
abbr private
    private

snippet equals
alias eq
abbr ===
    ===

snippet not_equals
alias ne
abbr !==
    !==

snippet public_get
alias pubget
abbr public get ${1:fieldName}(): ${2:type} {${0:#:here}}
    public get ${1:fieldName}(): ${2:type} {${0:#:here}}

snippet public_set
alias pubset
abbr public set ${1:fieldName}(x: ${2:type}) {${0:#:here}}
    public set ${1:fieldName}(x: ${2:type}) {${0:#:here}}

snippet private_get
alias priget
abbr private get ${1:fieldName}(): ${2:type} {${0:#:here}}
    private get ${1:fieldName}(): ${2:type} {${0:#:here}}

snippet private_set
alias priset
abbr private set ${1:fieldName}(x: ${2:type}) {${0:#:here}}
    private set ${1:fieldName}(x: ${2:type}) {${0:#:here}}

snippet property_method
abbr ${1:#:name}(${2:#:args}): ${3:void} {${0:#:here}}
    ${1:#:name}(${2:#:args}): ${3:void} {${0:#:here}}

snippet elvis_operator
abbr ??
    ??

snippet tuple_type_to_union_type
abbr ${0:XTuple}[number]
  ${0:XTuple}[number]

# Maps Type.K of all Type props to Type[K]
snippet mapped_type
abbr [${2:K} in ${1:keyof Type}]: ${0:Type[K]}
  [${2:K} in ${1:keyof Type}]: ${0:Type[K]}

snippet mapped_type_object
abbr { [${2:K} in ${1:keyof Type}]: ${0:Type[K]} }
  { [${2:K} in ${1:keyof Type}]: ${0:Type[K]} }

# Types

snippet record_like_object
abbr Record<string, unknown>
  Record<string, unknown>

# Expressions

snippet check_typed_property_existent
abbr typeof (${1:x} as { ${2:propName}?: ${3:primitive} }).$2 === '$3'${0}
    typeof (${1:x} as { ${2:propName}?: ${3:primitive} }).$2 === '$3'${0}

snippet check_optional_is_foo
    ${4:isFoo}((${1:x} as { ${2:propName}?: ${3:Type} }).$2)

snippet debugger
alias break_point
abbr debugger
    debugger

snippet new_promise
abbr new Promise((resolve, reject) => ${0:here}
    new Promise((resolve, reject) => ${0:here})

snippet sleep_promise
abbr const sleep = msec => new Promise(resolve => setTimeout(resolve, msec))
  const sleep = msec => new Promise(resolve => setTimeout(resolve, msec))

snippet use_logger_immediately
abbr import(${1:'@/data/logger'}).then(x => ${2:x.default.log}(${0:#:here}))
    import(${1:'@/data/logger'}).then(x => ${2:x.default.log}(${0:#:here}))

snippet throw_definitely_here_is_not_passed
abbr process.exit(1)
    process.exit(1)

snippet regex_email_validation
abbr /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/
    /^[a-zA-Z0-9.!#$%&'*+/=?^_\`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/

# Syntax templates

snippet const_function
alias constfun cfun
abbr const ${1:funcName} = (${2:#:args}) => ${0}
  const ${1:funcName} = (${2:#:args}) => ${0}

snippet export_default
alias exd
abbr export default
  export default

# Others

snippet block_typescript
abbr ```typescript
alias blts
  \`\`\`typescript
  * ${0:here}
  * \`\`\`

snippet ts_expect_error
abbr // @ts-expect-error
  // @ts-expect-error

snippet console_log_poi
alias poi
abbr console.log('poi:', ${0})
  console.log('poi:', ${0})
