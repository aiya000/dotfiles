# Syntaxes

snippet traditional_for
alias for_traditional
abbr for (${1:#:let}; ${2:#:cond}; ${3:#:eff}) {${0}}
    for (${1:#:let}; ${2:#:cond}; ${3:#:eff}) {${0}}

snippet for_in
abbr for (const ${1:i} in ${2:xs}) {${0}}
    for (const ${1:i} in ${2:xs}) {${0}}

snippet for_of
alias for
abbr for (const ${1:x} of ${2:xs}) {${0}}
    for (const ${1:x} of ${2:xs}) {${0}}

snippet while
abbr while (${1:cond}) {${0:here}}
    while (${1:cond}) {${0:here}}

snippet switch
abbr switch (${1:name}) {${0:here}}
    switch (${1:name}) {${0:here}}

snippet case
abbr case ${1:constant}: ${0}
    case ${1:constant}: ${0}

snippet break
abbr break
    break

snippet throw_new_error
alias throw
abbr throw new Error(${0:here})
    throw new Error(${0:here})

snippet if
abbr if (${1:#:cond}) {${0}}
    if (${1:#:cond}) {${0}}

snippet else
abbr else {${0:here}}
    else {${0:here}}

snippet function
alias   func fun def
abbr function ${1:#:name}(${2:#:args}): ${3:void} {${0}}
    function ${1:#:name}(${2:#:args}): ${3:void} {${0}}

snippet arrow_function
alias arrow arr
abbr (${1:args}) =>${0}
    (${1:args}) =>${0}

snippet method
alias met
abbr ${1:name}(${2:#:args}): ${3:type} {${0:here}}
    ${1:name}(${2:#:args}): ${3:type} {${0:here}}

snippet interface
alias inter
abbr interface ${1:Name} {${0}}
    interface ${1:Name} {${0}}

snippet type
abbr type ${1:Name} = ${0}
    type ${1:Name} = ${0}

snippet try
abbr try {${0:here}}
    try {${0:here}}

snippet catch
abbr catch (e) {${0:here}}
    catch (e) {${0:here}}

snippet finally
abbr finally {${0:here}}
    finally {${0:here}}

snippet import_as
alias imq
abbr import * as ${1} from '${0:here}'
    import * as ${1} from '${0:here}'

snippet import
alias imp
abbr import { ${1} } from '${0:here}'
    import { ${1} } from '${0:here}'

snippet export
alias exp
abbr export
    export

snippet const
alias val
    const

snippet let
    let

snippet instanceof
    instanceof

snippet typeof
    typeof

snippet public
    public

snippet private
    private

snippet readonly
    readonly

snippet enum
abbr enum ${1:Name} {${0}}
    enum ${1:Name} {${0}}

snippet class
abbr class ${1:Name} {${0}}
    class ${1:Name} {${0}}

snippet constructor
    constructor(${1:#:args}) {${0}}

snippet namespace
alias names
abbr namespace ${1:Name} {${0}}
    namespace ${1:Name} {${0}}

snippet module
abbr module ${1:Name} {${0}}
    module ${1:Name} {${0}}

snippet declare
alias decl
abbr declare
    declare

snippet get
abbr get ${1:fieldName}(): ${2:type} {${0:here}}
    get ${1:fieldName}(): ${2:type} {${0:here}}

snippet set
abbr set ${1:fieldName}(x: ${2:type}) {${0:here}}
    set ${1:fieldName}(x: ${2:type}) {${0:here}}

# Expressions

snippet println
alias pr
abbr console.log(${0:here})
    console.log(${0:here})

snippet print_error_ln
alias er
abbr console.error(${0:here})
    console.error(${0:here})

snippet stripLineBreaks
abbr .replace(/(?:\r\n|\r|\n)/g, '')
    .replace(/(?:\r\n|\r|\n)/g, '')

snippet stripMargings
abbr .replace(/^\s\+/g, '')
    .replace(/^\s\+/g, '')

snippet unify_spaces_to_one
abbr .replace(/\s+/g, ' ')
    .replace(/\s+/g, ' ')

snippet todo
abbr throw new Error('TODO (${0:somewhere})')
    throw new Error('TODO (${0:somewhere})')

snippet force_null
abbr null as any as string
    null as any as string

# Others

snippet reference
abbr /// <reference path='${0:d-ts-path}'/>
    /// <reference path='${0:d-ts-path}'/>

# Templates

snippet private_method
alias primet
abbr private ${1:name}(${2:#:args}): ${3:type} {${0:here}}
    private ${1:name}(${2:#:args}): ${3:type} {${0:here}}

snippet public_method
alias pubmet
abbr public ${1:name}(${2:#:args}): ${3:type} {${0:here}}
    public ${1:name}(${2:#:args}): ${3:type} {${0:here}}

snippet public_readonly
alias pubre
abbr public readonly
    public readonly

snippet private_readonly
alias prire
abbr private readonly
    private readonly

snippet pub
abbr public
    public

snippet pri
abbr private
    private

snippet equals
alias eq
abbr ===
    ===

snippet not_equals
alias ne
abbr !==
    !==

snippet public_get
alias pubget
abbr public get
    public get

snippet public_set
alias pubset
abbr public set
    public set

snippet private_get
alias priget
abbr private get
    private get

snippet private_set
alias priset
abbr private set
    private set
