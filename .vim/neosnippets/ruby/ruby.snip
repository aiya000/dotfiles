snippet def
alias fun
abbr def ${1:name}(${2:#:args})${0}end
    def ${1:name}(${2:#:args})${0}end

snippet class
abbr class ${1:Name}${0}end
    class ${1:Name}${0}end

snippet lambda_block
alias lam lambl
abbr {|${1:name}|${0}}
    {|${1:name}|${0}}

snippet lambda_do
alias lamdo
abbr do |${1:name}|${0}end
    do |${1:name}|${0}end

snippet case
abbr case ${1:x}${0}end
    case ${1:x}${0}end

snippet when
abbr when ${0:cond}
    when ${0:cond}

snippet else
abbr else
    else

snippet when_then
abbr when ${1:cond} then ${0}
    when ${1:cond} then ${0}

snippet raise
abbr raise ${0:exception}
    raise ${0:exception}

snippet begin
alias try
abbr begin${1}rescue${0}end
    begin${1}rescue${0}end

snippet rescue
alias catch
abbr rescue${0}end
    rescue${0}end

snippet do
abbr do${0:here}end
    do${0:here}end

snippet do_with_params
alias dp
abbr do |${1:params}|${0:here}end
    do |${1:params}|${0:here}end

snippet q
abbr %Q(${0:here})
    %Q(${0:here})

snippet heredoc
    <<-${1:EOS}
    ${0}
    $1

snippet heredoc_strip_margins
alias here
    <<~${1:EOS}
    ${0}
    $1

snippet for
abbr for ${1:x} in ${2:xs} do${0}end
    for ${1:x} in ${2:xs} do${0}end

snippet if
abbr if ${1:cond} then ${0}end
    if ${1:cond} then${0}end

snippet require
alias import imp
abbr require '${0:here}'
    require '${0:here}'

# Expressions

snippet pr
abbr puts ${0}
    puts ${0}
