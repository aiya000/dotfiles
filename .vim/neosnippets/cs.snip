# Structure
snippet namespace
    namespace ${1} {
        ${0:TARGET}
    }

snippet class
    class ${1} ${2:#::} ${3:#:Parent}${4:#:,} ${5:#:Interface} {
        ${0:TARGET}
    }

snippet struct
    struct ${1} ${2:#::} ${3:#:Interface} {
        ${0:TARGET}
    }

snippet interface
    interface ${1} ${2::} ${3:#:Parent} {
        ${0:TARGET}
    }

snippet method
    ${1:void} ${2:#:Method}(${3}) {
        ${0:TARGET}
    }

snippet enum
abbr enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    }


# Declare
snippet var
    ${1:#:type} ${2:#:var}${3};

snippet const
    public static const ${1:#:type} ${2:#:var} = ${3};${4}

snippet const_string
    public static const string ${1:var} = "${2}";${3}

snippet readonly
    public readonly ${1:#:type} ${2:#:var} = ${3};${4}

snippet delegate
    delegate ${1:void} ${2:#:Delegate}(${3});${4}

snippet property
alias   prop
    ${1:int} ${2:#:Name} { get${3:;} ${4:#:private }set${5:;} }${0}

snippet get
    get {${0:TARGET}}

snippet set
    set {${0:TARGET}}


# Syntax
snippet if
    if (${1}) {
        ${2:TARGET}
    }

snippet elseif
alias   elif
    else if (${1}) {
        ${2:TARGET}
    }

snippet while
    while (${1}) {
        ${2:TARGET}
    }

snippet for
    for (${1}; ${2}; ${3}) {
        ${4:TARGET}
    }

snippet foreach
alias   fore
    foreach (${1} in ${2}) {
        ${3:TARGET}
    }

snippet switch
    switch (${1}) {
        ${2:TARGET}
    }

snippet case
    case ${1}:
        ${2:TARGET}
    ${0}

snippet br
    break;

snippet default
alias   de
    default:
        ${0}

snippet try
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:Console.WriteLine(e.ToString());}
    }

snippet try_n
    try {
        ${0:TARGET}
    } catch {
        ${1:Console.WriteLine(e.ToString());}
    }

snippet try_finally
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:Console.WriteLine(e.ToString());}
    } finally {
        ${4}
    }

snippet try_finally_n
    try {
        ${0:TARGET}
    } catch {
        ${1:Console.WriteLine(e.ToString());}
    } finally {
        ${2}
    }

snippet catch
    catch (${1:Exception} ${2:e}) {
        ${0:Console.WriteLine(e.ToString());}
    }

snippet catch_n
    catch {
        ${0:Console.WriteLine(e.ToString());}
    }

snippet finally
    finally {
        ${0:TARGET}
    }

snippet th
    throw ${0}

snippet lock
    lock(${1}){
        ${0:TARGET}
    }

snippet using
alias   resource
    using(${1}){
        ${0:TARGET}
    }

snippet checked
    checked(${1}){
        ${0:TARGET}
    }

snippet unchecked
    unchecked(${1}){
        ${0:TARGET}
    }

snippet unsafe
    unsafe {
        ${0:TARGET}
    }

snippet fixed
    fixed (${1:#:type}* ${2:#:var} = ${3:#:adress}) {
        ${0:TARGET}
    }

snippet using_import
alias   import
    using ${1};
    ${0}


# NUnit
snippet testclass
alias   tc
    [TestFixture]
    public class ${1}Test {
        ${0:TARGET}
    }

snippet testsetup
alias   tsu
    [SetUp]
    public void SetUp() {
        ${0:TARGET}
    }

snippet testteardown
alias   ttd
    [TearDown]
    public void TearDown() {
        ${0:TARGET}
    }

snippet test
    [Test]
    public void ${1:#:Name}Test() {
        ${0:TARGET}
    }


# Import Path
snippet s.l
    System.Linq

snippet s.c.g
    System.Collections.Generic

snippet s.t
    System.Text

snippet s.i
    System.IO

snippet s.d
    System.Diagnostics

snippet s.w.f
    System.Windows.Forms


# Attribute
snippet serializable
    [SerializableAttribute]

snippet conditional
alias   cond
    [Conditional("${0:#:symbol}")]

snippet obsolete
alias   deprecated
    [Obsolete("${0:#:description}")]

snippet category
    [Category("${0:#:category}")]

#XML Document
snippet summary
    /// <summary>${0:#:description}</summary>

snippet c
    <c>${1:#:text}</c>${0}

snippet code
    /// <code>${0:#:content}</code>

snippet example
    /// <example>${0:#:description}</example>

snippet {docRoot
    {@docRoot

snippet {inheritDoc
    {@inheritDoc

snippet {link
    {@link ${1:#:target} ${0:#:label}

snippet {linkplain
    {@linkplain ${1:#:target} ${0:#:label}

snippet {literal
    {@literal ${0}

snippet param
    /// <param name="${1:#:name}">${0:#:description}</param>

snippet returns
    /// <returns>${0:#:description}</returns>

snippet see
    /// <see cref="${0:#:member}"/>

snippet serial
    @serial ${0:#:description}

snippet sd
    @serialField ${0:#:description}

snippet sf
    @serialField ${1:#:name} ${2:#:type} ${0:#:description}

snippet since
    @since ${0:#:version}

snippet exception
    /// <exception cref="${1:#:class}">${2:#:description}</exception>${0}

snippet {value
    {@value ${0}

snippet version
alias   ver
    @version ${0:#:version}

# Other
snippet main
    public static void Main(string[] args) {
        ${0}
    }

snippet writeline
alias   println
    Console.WriteLine(${1});${0}

snippet write
alias   print
    Console.Write(${1});${0}

snippet helloworld
options head
    public class ${1:Hello} {
        public static void Main(string args[]) {
            System.Console.WriteLine("Hello, world!");
        }
    }
