# ImportPath
snippet s.r.c
abbr    System.Runtie.CompilerServices
    System.Runtime.CompilerServices

snippet m.v
abbr    Microsoft.VisualBasic
    Microsoft.VisualBasic

snippet UnitTesting
abbr    Microsoft.VisualStudio.TestTools.UnitTesting;
    Microsoft.VisualStudio.TestTools.UnitTesting;

snippet Friendly
abbr    Codeer.Friendly;
    Codeer.Friendly;

snippet FriendlyWindows;
abbr    Codeer.Friendly.Windows;
    Codeer.Friendly.Windows;

snippet FriendlyDynamic;
abbr    Codeer.Friendly.Dynamic;
    Codeer.Friendly.Dynamic;

snippet FriendlyWindowsGrasp;
abbr    Codeer.Friendly.Windows.Grasp;
    Codeer.Friendly.Windows.Grasp;

snippet FriendlyWPFStandardControls;
abbr    RM.Friendly.WPFStandardControls;
    RM.Friendly.WPFStandardControls;


# Method
snippet messagebox
alias   msgbox
abbr    MessageBox.Show(text, caption, Buttons, Icon);
    MessageBox.Show(${1:#:text}, ${2:#:caption}, MessageBoxButtons.${3:OK}, MessageBoxIcon.${4:Information});${0}

snippet messagebox_yesno
alias   msgbox_yesno
abbr    MessageBox.Show(text, caption, Buttons.YesNo, Icon.Question);
    MessageBox.Show(${1:#:text}, ${2:#:caption}, MessageBoxButtons.YesNo, MessageBoxIcon.Question);${0}

snippet inputbox
abbr    Interaction.InputBox(prompt, title, defaultResponce);
    Interaction.InputBox(${1:#:Prompt}, ${2:#:Title}, "${3:#:DefaultResponse}");${0}

snippet messagebox_wpf
alias   msgbox_wpf
abbr    MessageBox.Show(text, caption, Button, Icon);
    MessageBox.Show(${1:#:text}, ${2:#:caption}, MessageBoxButton.${3:OK}, MessageBoxImage.${4:Information});${0}

snippet messagebox_yesno_wpf
alias   msgbox_yesno_wpf
abbr    MessageBox.Show(text, caption, Button.YesNo, Icon.Question);
    MessageBox.Show(${1:#:text}, ${2:#:caption}, MessageBoxButton.YesNo, MessageBoxImage.Question);${0}

snippet DebugPrint
abbr    System.Diagnostics.Debug.Print();
    System.Diagnostics.Debug.Print(${0});


# Preprocess
snippet pragma_restore
    #pragma warning restore ${1:#:errno}


# Attribute
snippet InternalsVisibleToAttribute
abbr    [assembly: InternalsVisibleTo()]
    #pragma warning disable 0657
    [assembly: InternalsVisibleTo("${1:#:FriendName}")]
    #pragma warning restore 0657${0}

snippet DebuggerDisplayAttribute
abbr    [DebuggerDisplayAttribute()]
    [DebuggerDisplayAttribute("${1:#:Name} = {${2:#:Member}}")]${0}

snippet TestClassAttribute
abbr    [TestClass]
    [TestClass]${0}

snippet TestMethodAttribute
abbr    [TestMethod]
    [TestMethod]${0}

snippet TestInitializeAttribute
abbr    [TestInitialize]
    [TestInitialize]${0}

snippet TestCleanupAttribute
abbr    [TestCleanup]
    [TestCleanup]${0}


# Syntax
snippet else
abbr    else {}
options indent
    else {
        ${0:TARGET}
    }


# Template
snippet ViewModelTemplate
alias   VMTemplate
options indent
    #region public field
    
    public event PropertyChangedEventHandler PropertyChanged;
    
    public string ${1:#:PropertyName} {
       get {
        return this.${2:#:propertSubName};
       }
       set {
        this.$2 = value;
        this.OnPropertyChanged("$1");
       }
      }
    
    #endregion
    
    #region private field
    
    private string $2;
    
    #endregion
    
    #region public constructor
    
    public ManagerRegisterWindowViewModel() {
       this.$1 = string.Empty;
      }
    
    #endregion
    
    #region private method
    
    private void OnPropertyChanged(string name) {
       if (this.PropertyChanged != null) {
        this.PropertyChanged(this, new PropertyChangedEventArgs(name));
       }
      }
    
    #endregion

#TODO: expand target in quote
snippet FriendlyTestClassTemplate
options indent
    using System;
    using System.Windows;
    using System.Diagnostics;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Codeer.Friendly;
    using Codeer.Friendly.Windows;
    using Codeer.Friendly.Dynamic;
    using Codeer.Friendly.Windows.Grasp;
    using RM.Friendly.WPFStandardControls;
    
    [TestClass]
    public class ${1:#:TargetClass}Test {
    
        #region field
    
        WindowsAppFriend app;
    
        #endregion
    
        #region public method
    
        [TestInitialize]
        public void TestInitialize() {
            this.app = new WindowsAppFriend(Process.Start(@"..\..\..\
            ${2:#:TargetProjectName}\bin\
            ${3:Debug}\
            $2.exe
            "));
        }
    
        [TestCleanup]
        public void TestCleanup() {
            Process.GetProcessById(this.app.ProcessId).CloseMainWindow();
        }
    
        [TestMethod]
        public void ShouldBe${4:#:Context}() {
            var mainCore = this.app.Type<Application>().Current.MainWindow;
        }
    
        #endregion
    
    }
