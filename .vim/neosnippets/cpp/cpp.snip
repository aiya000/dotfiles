# Syntaxes

snippet template
abbr    template <{typename} {T}>
    template <${1:typename} ${2:T}>

snippet for
options indent
abbr    for (auto&& {x} : {xs}) {}
    for (${1:auto&&} ${2:x} : ${3:xs}) {
        ${0:TARGET}
    }

snippet for_with_index
abbr    for ({var}; {cond}; {effect}) {}
options indent
    for (${1:var}; ${2:condition}; ${3:effect}) {
        ${0:TARGET}
    }

snippet if
abbr if ({cond}) {}
options indent
    if (${1:condition}) {
        ${0}
    }

snippet else
abbr else {}
options indent
    else {
        ${0}
    }

snippet switch
abbr switch ({x}) {}
    switch (${1:target}) {
    ${0}
    }

snippet while
abbr while ({cond}) {}
options indent
    while (${1:condition}) {
        ${0}
    }

snippet try
abbr try {}
    try {
        ${0}
    }

snippet catch
abbr catch ({exception}) {}
options indent
    catch (${1:exception}) {
        ${0}
    }

snippet finally
abbr finally {}
    finally {
        ${0}
    }

snippet namespace
abbr namespace {foo::bar} {}
    namespace ${1:foo::bar} {
        ${0}
    }

snippet namespace_anonymous
abbr namespace {}
    namespace {
        ${0}
    }

snippet using
abbr using {stuff}
    using ${0}

snippet class
abbr class {name} {};
    class ${1:Name} {
        ${0}
    };

snippet struct
abbr struct {name} {};
    struct ${1:Name} {
        ${0}
    };

snippet enum
abbr enum {name} {};
    enum ${1:Name} {
        ${0}
    };

snippet enum_class
abbr enum class {name} {};
    enum class ${1:Name} {
        ${0}
    };

snippet lambda
alias lam
abbr [{captures}]({parameters}){{body}}
    [${1}](${2}){${0}}

snippet noexcept
abbr noexcept
    noexcept

# Macros

snippet include_library
alias include
options head
abbr #include <{path}>
    #include <${0:path}>

snippet include_myown
alias includeo
options head
abbr #include "{path}"
    #include "${0:path}"

# Expressions

snippet demangle
abbr    abi::__cxa_demangle(mangled_name, 0, 0, nullptr);
    abi::__cxa_demangle(${1:#:var}.name(), 0, 0, nullptr);

snippet println
abbr std::cout << {something} << std::endl;
    std::cout << ${1:something} << std::endl;

snippet print
abbr std::cout << {something};
    std::cout << ${1:something};

snippet wprintln
abbr std::wcout << {something} << std::endl;
    std::wcout << ${1:something} << std::endl;

snippet wprint
abbr std::wcout << {something};
    std::wcout << ${1:something};

# Templates

snippet do_demangle
alias lets_demangle demangle_template
options indent
    #include <cxxabi.h> // copy and paste this to the top of your file
    char* typeName = abi::__cxa_demangle(typeid(${1:#:var}).name(), 0, 0, nullptr);
    ${0}
    std::free(typeName);

snippet catch_std_exception
abbr catch (const std::exception& e) {}
    catch (const std::exception& e) {
        ${0}
    }

snippet get_type_of_exception_ptr
alias exception_ptr_type
    std::cout << (${1:p} ? $1.__cxa_exception_type()->name() : "null") << std::endl;

snippet do_at_scope_end
alias finally
options indent
    struct ${1:Finally} {
        std::function<void()> f;
        $1(std::function<void()> f) : f(f) {}
        ~$1() {
            this->f();
        }
    };

snippet main
options indent
abbr int main() {{}}
    int main() {${0:here}}

snippet unique_resource
alias scoped_resource scoped_guard finally
abbr class unique_resource ...
options indent
    /*!
     * A 'finally' implementation (like N3949),
     * this doesn't have thread safeties.
     */
    class unique_resource {
        std::function<void()> finally;
    public:
        unique_resource(const unique_resource&) = delete;
        explicit unique_resource(std::function<void()> finally) : finally(finally) {}
        ~unique_resource() {
            this->finally();
        }
    };

snippet vector_filter
alias filter
    std::vector<${1:int}> ${2:zs};
    std::copy_if(${3:xs}.begin(), $3.end(), std::back_inserter($2), ${4:predicate});
