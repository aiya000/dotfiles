# Syntaxes

snippet data
    data ${1:Name} = ${0}

snippet newtype
options indent
    newtype ${1:Name} = $1

snippet deriving
alias der deri
abbr    deriving (__)
    deriving (${0:here})

snippet class
    class ${1:Name} where${0}

snippet import
alias imp
abbr    import
    import ${1}

snippet import_qualified
alias imq
abbr    import qualified __ as __
    import qualified ${1} as ${2}

snippet hiding
abbr hiding (${0:here})
    hiding (${0:here})

snippet infixl
abbr infixl {infixity} {operator}
    infixl ${1:3} ${2:<>}

snippet infixr
abbr infixr {infixity} {operator}
    infixr ${1:3} ${2:<>}

snippet default
abbr default ({default-numeric-type})
    default (${1:Int})

snippet module
    module ${1:ModuleName} where${0}

snippet to
alias constraints_for
    =>

# Templates

snippet main
abbr main :: IO () \n main = {expr}
options indent
    main :: IO ()
    main = ${0}

snippet comment_block
alias com
    {-${1}-}

snippet document_comment
alias haddock_comment doc
    -- |

snippet document_comment_back
alias doc_back back_doc bak doca
    -- ^

snippet output
abbr -- {output}\n-- {__}
    -- {output}
    -- ${0}

snippet liquid_refinement_type_func
alias liquid_refinement_type
abbr {-@ {function} :: {type} @-}
    {-@ ${1:funcName} :: ${2} @-}

snippet liquid_refinement_type_type
abbr {-@ type {type-name} = {type} @-}
    {-@ type ${1:typeName} = ${2} @-}

snippet unboxed_sums_type
abbr (# {a-type} | {a-type} #)
    (# ${1:X} | ${2:Y} #)

snippet unboxed_sums_pattern_first
alias unboxed_sums_expression_first
abbr #( {an-expression} | #)
    #( ${0} | #)

snippet unboxed_sums_pattern_second
alias unboxed_sums_expression_second
abbr #( | {an-expression} #)
    #( | ${0} #)

snippet doctest_block
abbr >>> :{\n__\n-- >>> :}
    >>> :{
    ${0}
    -- >>> :}

snippet quasi_quote
alias q
abbr [{quoter}|{stuff}|]
    [${1:r}|${0}|]

snippet quasi_quote_i
alias qi i
abbr [i|{stuff}|]
    [i|${0}|]

snippet quasi_quote_r
alias qr r
abbr [r|{stuff}|]
    [r|${0}|]

snippet quasi_quote_s
alias qs s
abbr [s|{stuff}|]
    [s|${0}|]

snippet quasi_quote_here
alias qhere here
abbr [here|{stuff}|]
    [here|${0}|]

snippet import_data_string_here
abbr import Data.String.Here
    import Data.String.Here

snippet here_string_interpolation
alias interp
abbr ${{an-expression}}
    ${${1:expr}}${0}

snippet raise_fatal_error
alias fatal_error
    [${1:i}|${2:funcName} at ${(__FILE__ :: String)}:L${(__LINE__ :: Int)}: fatal error! Sorry, please report an issue :(|]

snippet expand_debug_modules
alias unsafe_debug debug_unsafe
    --TODO: Remove these import
    import qualified GHC.Stack as Debug
    import qualified Debug.Trace as Debug
    import qualified System.IO.Unsafe as Debug
    --

    --TODO: Remove this function
    unsafePrint :: Show a => a -> ()
    unsafePrint = Debug.unsafePerformIO . print

    --TODO: Remove this function
    ninjaOfUnsafe :: Show a => a -> a
    ninjaOfUnsafe x = unsafePrint x \`seq\` x

    --TODO: Remove this function
    currentFuncName :: IO String
    currentFuncName = Debug.currentCallStack >>= \xs -> case xs of
      [] -> error "no callstack is found (do you \`stack build --profile\`?)"
      _  -> return . head . words $ xs !! (length xs - 2)

snippet println_for
alias println pr print
    print $ ${0}

snippet putStrLn
alias puts
abbr putStrLn
    putStrLn 

snippet lens_get
alias get
    ^.

snippet lens_set
alias set
    .~

snippet prism_get
alias look lk
    ^?

# this [i|
#          foo
#          bar
#      |]
snippet trimMargins
alias stripMargins
abbr trimMargins :: String -> String
    trimMargins = trim . unlines . map trim . lines
    trim = reverse . dropWhile (== ' ') . reverse . dropWhile (== ' ')

snippet flattenMargins
abbr flattenMargins :: String -> String
    flattenMargins :: String -> String
    flattenMargins = replace . unlines . filter (/= "") . map (dropWhile (== ' ')) . lines
        where
            replace [] = []
            replace ('\n' : xs) = ' ' : replace xs
            replace (x : xs) = x : replace xs

snippet undefined
abbr Prelude.undefined
    Prelude.undefined
