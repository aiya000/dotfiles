# Syntaxes

snippet import
alias imp
abbr import ${0:module}
    import ${0:module}

snippet import_as
alias import_qualified imq
abbr import ${1:module} as ${0:alias}
    import ${1:module} as ${0:alias}

snippet from
abbr from ${1:stuff} import ${0:module}
    from ${1:module} import ${0:stuff}

snippet if
abbr if ${1}:${0}
    if ${1}:${0}

snippet else
abbr else:
    else:

snippet for
abbr for ${1:x} in ${2:xs}:
    for ${1:x} in ${2:xs}:

snippet def
alias fun
abbr def ${1:name}(${2:#:self}) -> ${3:type}:${0}
    def ${1:name}(${2:#:self}) -> ${3:type}:${0}

snippet class
alias cla
abbr class ${1:Name}${2:#:(Super)}:${0}
    class ${1:Name}${2:#:(Super)}:${0}

snippet conditional_operator
alias cond
abbr ${1:value_if_true} if ${2:cond} else ${0:value_if_false}
    ${1:value_if_true} if ${2:cond} else ${0:value_if_false}

snippet lambda
alias lam
abbr lambda ${1:args}: ${0}
    lambda ${1:args}: ${0}

# Templates

snippet print
alias pr
    print(${0})

snippet __init__
alias init
abbr def __init__(self{, ...}) -> None:
 def __init__(self${1:#:, x}) -> None:
    ${0}

snippet __post_init__
alias post_init
abbr def __post_init__(self{, ...}) -> None:
 def __post_init__(self${1:#:, x}) -> None:
    ${0}

snippet __str__
alias __str
abbr def __str__(self) -> str:
 def __str__(self) -> str:
    ${0}

snippet if_name_is_main
abbr if __name__ == '__main__':
    if __name__ == '__main__':
