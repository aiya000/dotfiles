snippet fun
alias def
options indent
    fun ${1:funcName}(${2:#:args})${0}

snippet println
alias pln prln
abbr    println(__)
    println(${0:here})

snippet print
abbr    print(__)
    print(${0})

snippet print_error_line
alias print_errror_ln err_println
    System.err.println(${1:here})

snippet class
    class ${1:Name} {${0:here}}

snippet class_without_constructor
abbr class __ {__}
    class ${1:Name} {${0}}

snippet class_with_constructor
abbr class __(__) {__}
    class ${1:Name}(${2:args}) {${0}}

snippet data_class
alias data
    data class ${1:Name}(${2:members})

snippet sealed_class
abbr sealed class __
    sealed class ${1:Name}

snippet interface
    interface ${1:Name} {${0:here}}

snippet companion_object
abbr companion object
    companion object

snippet if
    if (${1:#:cond}) {${0:here}}

snippet else
    else {${0:here}}

snippet get
    get(${1:#:args}) ${0}

snippet set
    set(${0:here})

snippet elvis_operator
    ?:

snippet force_unwrap_nullable_operator
    !!

snippet when
options indent
    when (${1}) {
        ${2} -> ${3}
    }

snippet when_without_arg
options indent
    when {
        ${2} -> ${3}
    }

snippet init
    init {${0:here}}

snippet for
abbr for (__ in __) {__}
    for (${1} in ${2}) {${0:her}}

snippet while
    while (${1:cond}) {${0:here}}

snippet import
    import ${0}

snippet try
    try {${0:here}}

snippet catch
    catch (${1:e}: ${2:Exception}) {${0:here}}

snippet finally
    finally {${0:here}}

snippet anonymous_class_instance
alias object_anonymous_instance object
    object : ${1:Parent} {${0:here}}

snippet constructor
    constructor(${1:args})

snippet constructor_delegate_to_parent
    constructor(${1:args}) : Super(${2:args})

snippet return
    return;

snippet enum_class
alias enum
    enum class ${1:Name} {
        ${0}
    }

snippet sealed
    sealed

snippet abstract
    abstract

snippet override
    override

snippet tailrec
    tailrec

snippet typealias
    typealias

snippet vararg
    vararg

snippet suspend
    suspend

snippet internal
    internal

snippet inline
    inline

snippet noinline
    noinline

snippet crossinline
    crossinline

snippet operator_overload_get
    operator fun get(${1:i: Int}): ${2:Int}

snippet operator_overload_iterator
    operator fun iterator(): Iterator<${1:Type}> ${0}

# Anotation
snippet annotation_throws
    @Throws(${1:SomeException}::class)

## Android SDK

snippet log_debug
alias logd
    Log.d("poi", ${0:here})

snippet log_error
alias loge
    Log.e("poi", ${0:here})

# Expression

snippet iterate
alias steps
    Array(${1:5}, ${2:Int->T})

snippet java_array
    val x: ${1:Int}Array = ${2:int}ArrayOf(${3:#:...})

snippet synchronized
    synchronized (${1:lockObject}) {${0}}

snippet throw_runtime_exception_as_todo_not_implemented_yet
alias todo undefined not_implemented_yet
    throw RuntimeException("TODO: Not implemented yet (${1:#:piece})")${0}

snippet throw_runtime_exception_as_fatal_error
alias fatal_error
    throw RuntimeException("fatal error! ${1:message}")

snippet launch
alias async_block_without_returning_a_value
    launch {${0:here}}

snippet async
alias async_block_with_returning_a_value
    async {${0:here}}

snippet runBlocking
alias run_async_operations
    runBlocking {${0:here}}

# Others

snippet define_sum_types
alias sum_types declare_sum_types
    sealed class ${1:TypeName} {
        data class ${2:TermName}(${3:#:fields}) : $1()${0}
    }

snippet override_fun
    override fun ${1:funcName}(${2:#:args})${0}

snippet abstract_fun
    abstract fun ${1:funcName}(${2:#:args})${0}

snippet private_fun
    private fun ${1:funcName}(${2:#:args})${0}

snippet override_to_string
    override fun toString() ${0}

snippet main_object
    object Main {
        @JvmStatic
        fun main(args: Array<String>) {
            ${0}
        }
    }
