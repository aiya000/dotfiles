snippet use_strict
abbr 'use strict';
    'use strict';

snippet import
abbr import { ${1:objects} } from '${2:module-name}'
    import { ${1:objects} } from '${2:module-name}'

snippet print
alias prlintln
abbr console.log(${1:#:hello});
    console.log(${1:#:hello});

snippet for
abbr for (${1:#:var}; ${2:#:condition}; ${3:#:effect}) {${0:here}}
    for (${1:#:var}; ${2:#:condition}; ${3:#:effect}) {${0:here}}

snippet foreach
alias   fore
abbr for (${1:var} ${2:#:x} in ${3:#:xs}) {${0:here}}
    for (${1:var} ${2:#:x} in ${3:#:xs}) {${0:here}}

snippet if
abbr if (${1:cond}) {${0:here}}
    if (${1:cond}) {${0:here}}

snippet else
abbr else {${0:here}}
    else {${0:here}}

snippet switch
abbr switch (${1:var}) {${0:here}}
    switch (${1:var}) {${0:here}}

snippet case
abbr case ${1:LABEL}:\n${0}\nbreak;
    case ${1:LABEL}:
        ${0}
        break;

snippet define_prototype_Array#map
    Array.prototype.map = function (f) {
        for (var i = 0; i < this.length; ++i) {
            this[i] = f(i);
        }
        return this;
    };

snippet function
alias fun
abbr function ${1}(${2}) {${0:here}}
    function ${1}(${2}) {${0:here}}

snippet arrow_function
alias arrow
abbr (${1:#:args}) => ${0}
    (${1:#:args}) => ${0}

snippet class
abbr class ${1:Class} ${2:#:extends_Super}{${0:here}}
    class ${1:Class} ${2:#:extends_Super}{${0:here}}

snippet constructor
abbr constructor(${1:#:args}) {${0:here}}
    constructor(${1:#:args}) {${0:here}}
