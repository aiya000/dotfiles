# Syntax

snippet use_strict
abbr 'use strict';
    'use strict';

snippet import
alias imp
abbr import { ${1:objects} } from '${0:module-name}'
    import { ${1:objects} } from '${0:module-name}'

snippet import_as
alias import_qualified imq
abbr import * as ${1:name} from '${0:module-name}'
    import * as ${1:name} from '${0:module-name}'

snippet for_traditional
abbr for (${1:#:var}; ${2:#:condition}; ${3:#:effect}) {${0:here}}
    for (${1:#:var}; ${2:#:condition}; ${3:#:effect}) {${0:here}}

snippet for_of
alias for for_each
    for (${2:x} of ${3:#:xs}) {${0:here}}

snippet for_in
alias for for_each_propeties
    for (${2:x} in ${3:#:xs}) {${0:here}}

snippet if
abbr if (${1:cond}) {${0:here}}
    if (${1:cond}) {${0:here}}

snippet else
abbr else {${0:here}}
    else {${0:here}}

snippet switch
abbr switch (${1:var}) {${0:here}}
    switch (${1:var}) {${0:here}}

snippet case
abbr case ${1:LABEL}:\n${0}\nbreak;
    case ${1:LABEL}:
        ${0}
        break;

snippet try
abbr try {${0:here}}
    try {${0:here}}

snippet catch
abbr catch (e) {${0:here}}
    catch (e) {${0:here}}

snippet function
alias fun
abbr function ${1}(${2}) {${0:here}}
    function ${1}(${2}) {${0:here}}

snippet arrow_function
alias arrow
abbr (${1:#:args}) => ${0}
    (${1:#:args}) => ${0}

snippet method
alias met
abbr ${1:name}(${2:#:args}) {${0:here}}
    ${1:name}(${2:#:args}) {${0:here}}

snippet class
abbr class ${1:Class} ${2:#:extends_Super}{${0:here}}
    class ${1:Class} ${2:#:extends_Super}{${0:here}}

snippet constructor
abbr constructor(${1:#:args}) {${0:here}}
    constructor(${1:#:args}) {${0:here}}

snippet export_default
abbr export default {${0:here}}
    export default {${0:here}}

# Expressions

snippet print
alias prlintln pr
abbr console.log(${1:#:hello});
    console.log(${1:#:hello});

snippet equal
alias eq
abbr ===
    ===

snippet not_equal
alias ne
abbr !==
    !==

snippet throw_new_error
alias throw
abbr throw new Error(${0:here})
    throw new Error(${0:here})

# Templates

snippet define_prototype_Array#map
    Array.prototype.map = function (f) {
        for (var i = 0; i < this.length; ++i) {
            this[i] = f(i);
        }
        return this;
    };

# Others

snippet document_comment
alias doc
    /**
     * ${0}
     */
